subsystem = IRIS
component = hcd.hawaii

publish {

  description = """
Events published by Hawaii HCD and the underlying native process (hawaii-cproc).
"""

  currentStates = [
    {
      name              = state
      description       = "Hawaii HCD state"
      attributes = [
        {
          name          = mode
          description   = "Operation mode"
          enum          = [FULL_FRAME, SUBARRAY, ODGW]
        }
        {
          name          = simulation
          description   = "indicates whether it is in the simulation mode"
          type          = boolean
        }
        {
          name          = cmd
          description   = "command state"
          enum          = [UNINITIALIZED,READY,BUSY]
        }
        {
          name          = runContextId
          description   = "Run Context ID"
          type          = integer
        }
      ]
    }
    {
      name = cmdStatus
      description = "Standard command status of this assembly"
      archive = true
      ref = imager.shutter/events/cmdStatus
    }
    {
      name              = cprocState
      description       = "Status of hawaii-cproc."
      attributes = [
        {
          name              = running
          description       = "indicates whether hawaii-cproc is running."
          type              = boolean
        }
        {
          name              = pid
          description       = "PID of hawaii-cproc"
          type              = integer
        }
      ]
    }
    {
      name              = proxyState
      description       = "Status of the connection with hawaii-cproc."
      attributes = [
        {
          name              = connection
          description       = "ZeroMQ connection state"
          enum              = [NotInitialized, Connecting, Connected, Disconnected]
        }
        {
          name              = pubSocket
          description       = "ZeroMQ socket for messages from Hawaii HCD to hawaii-cproc (e.g., tcp://127.0.0.1:50001)"
          type              = string
        }
        {
          name              = subSocket
          description       = "ZeroMQ socket for messages from hawaii-cproc to Hawaii HCD (e.g., tcp://127.0.0.1:50002)"
          type              = string
        }
      ]
    }
    {
      name              = scienceState
      description       = "science exposure status"
      archive           = true
      attributes = [
        {
          name          = exposure
          description   = "State of the science exposure"
          enum          = [STOP,ONGOING,WRITING_DATA]
        }
        {
          name          = loaded
          description   = "Science exposure configuration has been loaded for the next exposure"
          type          = boolean
        }
      ]
    }
    {
      name              = odgwState
      description       = "ODGW exposure status"
      archive           = true
      attributes = [
        {
          name          = exposure
          description   = "State of the ODGW exposure"
          enum          = [STOP,CONTINUOUS]
        }
        {
          name          = loaded
          description   = "ODGW acquisition table has been loaded"
          type          = boolean
        }
      ]
    }
    {
      name              = odgwPixelCompression
      description       = """
ODGW detector pixel compression coefficients.
    
The ODGW publishes a multiplicative (gain) factor (to be applied first), and a scalar offset (to be applied second) to convert from compressed 2-byte integer to floating point pixel values.

The coefficients will not change during a continuous ODGW exposure.

This assembly guarantees that the conversion from any 2-byte integer using IEEE 754 compliant arithmetic operations for binary32 will not result in NaN, Inf or -Inf.
"""
      requirements      = [ICD-NFIRAOS-IRIS-0785]
      archive           = true
      attributes = [
        {
          name          = gain
          description   = "integer to float scale factor"
          type          = float
        }
        {
          name          = offset
          description   = "integer to float offset"
          type          = float
        }
      ]
    }
    {
      name = detectorConf
      description = "Detector configuration."
      archive = true
      attributes = [
        {
          name = gain
          description = "Conversion of photoelectrons to counts for each detector."
          type = float
          units = e-/ADU
        }
        {
          name = readNoise
          description = """
Nominal read noise of the detector. Note that the read noise may be different among pixels, channels, or areas. The actual read noise of science observation should be measured from the taken images.
"""
          type = float
          units = e-
        }
        {
          name = pixelClockingTime
          description  = "Time to select and read one pixel."
          type = float
          units = ms
        }
        {
          name = resetLevel
          description = "Reset level of each detector."
          type = float
          units = TBD
        }
        {
          name = detectorHost
          description = "Identifier (e.g., IP address, hostname) of the host computer that is connected to the detector controller."
          type = string
        }
        {
          name = controllerSerial
          description = "Identifier (e.g., serial number) of each detector controller if available."
          type = string
        }
        {
          name = detectorSerial
          description = "Identifier (e.g., serial number) of each detector if available."
          type = string
        }
        {
          name = versionCproc
          description = "The version number of the hawaii-cproc that is running under the supervision of Hawaii HCD."
          type = string
        }
        {
          name = versionAPI
          description = "The version number of the detector controller API."
          type = string
        }
        {
          name = versionDriver
          description = "The version number of Linux driver of the detector controller."
          type = string
        }
        {
          name = versionFirmware
          description = "The version number of downloaded DSP/FPGA code in the detector controller."
          type = string
        }
      ]
    }
    {
      name = irDetectorExposureState
      description = """
      This event has the same structure as the standardized IR detector state Observe Event.
      This event is published to notify the upper Assembly of the per-detector exposure status.
      Other software components should not subscribe this event, but the one published by the upper Assembly (i.e., Imager Detector Assembly, IFS Detector Assembly, and PV Mode Assembly).
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated."
          enum = [IMG1, IMG2, IMG3, IMG4, IFS, PVC]
        }
        {
          name = exposureInProgress
          description = """
            A boolean indictating if detector system is acquiring an exposure.
            It is delimited by exposureStart and exposureEnd Observe Events.
            exposureInProgress should be false if abortInProgress is true (TBD).
          """
          type = boolean
        }
        {
          name = abortInProgress
          description = """
            A boolean indictating if an abort has been requested and is underway
          """
          type = boolean
        }
        {
          name = isAborted
          description = """
            A boolean indictating if an abort has occurred and is completed.
            abortInProgress will be false when isAborted is true.
            isAborted will be set to false with the start of the next exposure
          """
          type = boolean
        }
        {
          name = operationalState
          description = """
          An enumeration that indicates if the detector system is available and operational with values: READY, BUSY, ERROR.
            *Allowable Values*
            <ul>
            <li>READY - indicates the system can execute exposures.
            <li>BUSY  - indicates system is BUSY with the most likely reason being it is acquiring data
            <li>ERROR - indicates the detector system is in an error state. This could happen as a result of a command or due to a spontaneous failure. Corrective action is required. The operationalState is reset to READY if the failure is cleared or to BUSY when the next exposure is started.
            </ul>
          """
          enum = [ READY | BUSY | ERROR ]
        }
        {
          name = errorMessage
          description = """
            An optional parameter that can be included when the detector system is in the ERROR operationalState to help understand the error state.
            This value should be cleared and removed from the state when the operationalState returns to READY.
          """
          type = string
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
    {
      name = irDetectorExposureData
      description = """
        This event has the same structure as the standardized IR detector state Observe Event.
        This event is published to notify the upper Assembly of the per-detector exposure status.
        Other software components should not subscribe this event, but the one published by the upper Assembly (i.e., Imager Detector Assembly, IFS Detector Assembly, and PV Mode Assembly).
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated."
          enum = [IMG1, IMG2, IMG3, IMG4, IFS, PVC]
        }
        {
          name = readsInRamp
          description = """
            The integer total number of reads in the ramp. Value should be constant during an exposure..
          """
          type = integer
          minimum = 2
          maximum = 99999
        }
        {
          name = readsComplete
          description = """
            Integer number of currently completed reads from 1 to readsInRamp.
            Will be reset to 0 at the start of every ramp.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = rampsInExposure
          description = """
            The integer total number of ramps in the current exposure. Value should be constant during an exposure.
          """
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = rampsComplete
          description = """
            Integer number of completed ramps from 1 to rampsInExposure.
            Will be reset to 0 at the start of every exposure.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = exposureTime
          description = "Length (as a float) in seconds of the current exposure.  For example: 1.25"
          type = float
          units = s
          exclusiveMinimum = 0
        }
        {
          name = remainingExposureTime
          description = """
            Number (as a float) of seconds remaining in the current exposure.  For example: 1.25.
            Count down every time one full frame is read out.
          """
          type = float
          units = s
          minimum = 0
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
    {
      name = dataWriteStart
      description = """
        This event has the same data structure as the standardized IR detector Observe Event.
        This event is published only for the IRIS PVC and to notify the PV Mode Assembly of the beginning of the raw science frame FITS file transfer.
        Other software components (Instrument Sequencer, DMS, ESW, etc.) must not subscribe to this event, but the same event from the PV Mode Assembly.
"""
      archive = true
      attributes = [
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = fileId
          description = "File ID of the data file that is being written."
          type = string
        }
      ]
    }
    {
      name = dataWriteEnd
      description = """
        This event has the same data structure as the standardized IR detector Observe Event.
        This event is published only for the IRIS PVC and to notify the PV Mode Assembly of the end of the raw science frame FITS file transfer.
        Other software components (Instrument Sequencer, DMS, ESW, etc.) must not subscribe to this event, but the same event from the PV Mode Assembly.
"""
      archive = true
      attributes = [
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = fileId
          description = "File ID of the data file that is being written or transferred."
          type = string
        }
      ]
    }
  ]

  events = [
    {
      name              = rawScienceFrameWriteEnd
      description       = "Notifies that one raw science frame has been written to DRS."
      archive           = false
      attributes = [
        {
          name = path
          description = "Path to the written raw science frame."
          type = string
        }
        {
          name = detector
          description = "Detector name. IMG1, IMG2, IMG3, IMG4 or IFS."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the exposure belongs to."
          type = string
        }
      ]
    }
  ]

  observeEvents = [
    {
      name = readoutEnd
      description = """
This Observe Event indicates that one individual raw readout of the full frame has been saved in the local disk.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector name. IMG1, IMG2, IMG3, IMG4, IFS or PVC."
          type = string
        }
        {
          name = read
          description = "Read # of the readout within a ramp."
          type = integer
          minimum = 1
        }
        {
          name = ramp
          description = "Ramp # which the readout belongs to."
          type = integer
          minimum = 1
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the exposure belongs to."
          type = string
        }
      ]
    }
    {
      name = readoutFailed
      description = """
This Observe Event indicates that hawaii-cproc has failed to save the individual raw readout in the local disk for some reason like I/O error.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector name. IMG1, IMG2, IMG3, IMG4, IFS or PVC."
          type = string
        }
        {
          name = read
          description = "Read number of the failed readout within a ramp."
          type = integer
          minimum = 1
        }
        {
          name = ramp
          description = "Ramp number which the readout failure belongs to."
          type = integer
          minimum = 1
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the failed readout belongs to."
          type = string
        }
        {
          name = reason
          description = "The reason why this readout couldn't be read or saved."
          type = string
        }
      ]
    }
  ]

  alarms = [
    {
      name             = drsIOError
      description      = "I/O error occurred when writing a FITS file to DRS over NFS."
      severityLevels   = [Major]
      location         = "hawaii-cproc running under the supervision of Hawaii HCD (IRIS.hcd.hawaii)"
      alarmType        = System
      probableCause    = "Issue in the network connection between hawaii-cproc and DRS."
      operatorResponse = """
Try to salvage the FITS file(s) that may have been written to the local disk instead of DRS.

Fix the network connection and run "test" command to make sure that the network connection is OK before executing another exposure.
"""
      autoAck          = false
      latched          = true
    }
    {
      name             = dmsIOError
      description      = "I/O error occurred when writing a FITS file to DMS."
      severityLevels   = [Major]
      location         = "hawaii-cproc running under the supervision of Hawaii HCD (IRIS.hcd.hawaii)"
      alarmType        = System
      probableCause    = "Issue in the network connection between hawaii-cproc and DMS."
      operatorResponse = """
Try to salvage the FITS file(s) that may have been written to the local disk instead of DMS.

Fix the network connection and run "test" command to make sure that the network connection is OK before executing another exposure.
"""
      autoAck          = false
      latched          = true
    }
  ]
}
