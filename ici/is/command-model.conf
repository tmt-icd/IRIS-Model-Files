subsystem = IRIS
component = is

description = "IRIS Instrument Sequencer commands."

receive = [
    {
        name = INITIALIZE
        description = "Initialize one or all IRIS subsystems.  If no argument is specificed, all subsystems will be initialized."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to be initialized."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

    {
        name = DATUM
        description = "Move specified IRIS subsystem to their datum (a.k.a. home or index) position, and/or set to a default configuration.  If no argument is specified, all subsystems will be datumed."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to find datum positions."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

    {
        name = STOP
        description = "Disable reads and/or stop moving components of the selected IRIS subsystem.  If no agrument is specified, all subsystems will be stopped."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to stop."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

    {
        name = PARK
        description = "For the specified subsystem, perform operations associated with STOP and then turn off power to electronics, and leave system in configuration in which all hardware can be safely shut down.  If no agrument is specified, all subsystems will be parked."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to park."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

    {
        name = TEST
        description = "Perform self-test of specified IRIS subsystem software and hardware systems.  If no agrument is specified, all subsystems will be tested."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to test."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }

    {
        name = SHUTDOWN
        description = "Perform a SHUTDOWN of the IRIS subsystem software.  If no agrument is specified, all subsystems will be shutdown."
        args = [
            {
                name = whichSubsystem
                description = "Select subsystem to shutdown."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    }
    { 
      name = config
      description = setup instrument for observation
      args = [
        {
          name = obsId
          description = "Observation ID given by ObserveConfigArg structure as stated in [TMT Software Detailed Design (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf)."
          type = string
        }
        {
	  name = filter
	  description = "Filter to use for imaging and spectroscopy (TBD confirm list)"
	  enum = [Z, Y, J, H, K, Ks, "H+K notch", CO, BrGamma, PaBeta, H2, FeII, HeI, CaII Trip, J Cont, H Cont, K Cont, Zn1, Zn2, Zn3, Zn4, Yn1, Yn2, Yn3, Yn4, Jn1, Jn2, Jn3, Jn4, Jn5, Hn1, Hn2, Hn3, Hn4, Hn5, Kn1, Kn2, Kn3, Kn4, Kn5] 
        }
        {
          name = scale
	  description = "Platescale for IFS observations"
	  enum = [4, 9, 25, 50]
	  units = mas
        }
        {
          name = spectralResolution
	  description = "Spectral resolution (grating) for IFS observations"
	  enum = [4000-Z, 4000-Y, 4000-J, 4000-H, 4000-K, "4000-H+K", 8000-Z, 8000-Y, 8000-J, 8000-H, 8000-Kn1-3, 8000-Kn4-5, 8000-Kbb, 10000-Z, 10000-Y, 10000-J, 10000-H, 10000-K, Mirror]
        }
	# the following two arguments to config could be broken out into individual functions
	# oiwfs ADC, instrument rotator controlled by AOESW.	
	{
	  name = scienceAdcFollow
	  description = "Enable or disable following of TCS stream for positioning science ADC."
	  type = boolean
	}	
	{
	  name = scienceColdStopFollow
	  description = "Enable or disable following of TCS stream for positioning science cold stop."
	  type = boolean
	}
	# subregions are currently listed as an "additional requirement", and may not need to be implemented.
        {
	  name = imagerDetectorSubregions
	  description = "Subregion extents for imager detectors.  First index specifies which detector, second index is x and y of lower left corner of subregion, third index is x and y of upper right corner of subregion.  TODO: different units/limits for each axis?"
	  type = array
	  dimensions = [4, 2, 2]
	  items = {
	       type = integer
	       minimum = 0
	       maximum = 4095
	  }
	  units = pixel
        }
        {
	  name = ifsDetectorSubregion
	  description = "Subregion extents for imager detector.  First index is x and y of lower left corner of subregion, second index is x and y of upper right corner of subregion."
	  type = array
	  dimensions = [2, 2]
	  items = {
	       type = integer
	       minimum = 0
	       maximum = 4095
	  }
	  units = pixel
        }
      ]
    } 
    { 
      name = observe
      description = "Perform a series of one or more exposures with either the Imager, IFS, or both."
      args = [
        {
          name = obsId
          description = "Observation ID given by ObserveConfigArg structure as stated in [TMT Software Detailed Design (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf)."
          type = string
        }
	# the following sync options are WAGs and need to be checked with science team
        {
          name = sync
	  description = "How to synchronize imager and IFS exposures.  Ignored if either imagerRepeats or ifsRepeats is zero.  Options TBD. TODO descriptions"
	  enum = [None, First frame, Each frame, Each IFS frame]
        }
        {
          name = imagerRepeats
	  description = "Number of imager exposures to take."
	  type = integer
	  minimum = 0
        }
        {
          name = ifsRepeats
	  description = "Number of IFS exposures to take."
	  type = integer
	  minimum = 0
        }
        { 
          name = imagerIntegrationTime
          description = "Integration time in ms for imager exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = ifsIntegrationTime
          description = "Integration time in ms for IFS exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = imagerCoadds
          description = "Number of coadditions for imager exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = ifsCoadds
          description = "Number of coadditions for IFS exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
      ]
    }
    {
      name = achieveEngineeringState
      description = """

Configure instrument to match a specific state for engineering purposes.  Accepted states are based on use cases described in IRIS Software Design Document (TMT.INS.PDD.14.024.DRF08) and as follows (this list may evolve):

	  * Warm Active
	  * Warm Stowed
	  * Pumping
	  * Warm Vacuum
	  * Cooling
	  * Stowed
	  * Warming
	  * Pressurizing
	  * Active - Idling
	  * Active - Offline
	  * Active - Online

"""
      args = [
        {
      	  name = state
	  description = desired state to achieve.
          enum = [Warm Active, Warm Stowed, Pumping, Warm Vacuum, Cooling, Stowed, Warming, Pressurizing, Active-Idling, Active-Offline, Active-Online]
        }
      ]
    }

]

send = [
     // cryotemp assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=setTargetTemperature
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     // pressure assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=pressure-assembly
     }
     // windowheater assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=setTargetTemperature
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     // cabinet-environment assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     // power assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOn
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOff
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOnAll
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOffAll
     	subsystem=IRIS
     	component=power-assembly
     }
     // ambienttemp assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=ambienttemp-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=ambienttemp-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=ambienttemp-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=ambienttemp-assembly
     }
     // sci-adc assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RESET
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=TRACK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=INSERT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=ROTATE
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     // coldstop assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=RESET
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=TRACK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=INSERT
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=RETRACT
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=ROTATE
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     // filter assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=filter-assembly
     }
     {
	name=RESET
     	subsystem=IRIS
     	component=filter-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=filter-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=filter-assembly
     }
     {
	name=CHANGE_FILTER
     	subsystem=IRIS
     	component=filter-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=filter-assembly
     }
     // pupilview assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=POWER_ON
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=POWER_OFF
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MOVE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=RESET
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     // imager-detector assembly
     {
	name=LOCK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=POWER_ON
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=POWER_OFF
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
        name=SET_ENCLOSURE_TEMP
	subsystem=IRIS
	component=csro-env-assembly
     }
]