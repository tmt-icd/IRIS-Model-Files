subsystem = IRIS
component = is

description = "IRIS Instrument Sequencer commands."

receive = [
    {
	name = submit
	description = "Pass a list of configurations in which the IS is asked to match the demand specified in the argument, acknowledge receipt, and provide completion information to the sender of the command."
	requiredArgs=[configList]
	args = [
	    {
		name = configList
		description = "List of configs to complete."
		enum=[SetupConfigArgs, ObserveConfigArgs]
	    }
	]
    }
    {
	name = oneway
	description = "Pass a list of configurations in which the IS is asked to match the demand specified in the argument.  Acknowledgement is required, but no completion information is needed."
	requiredArgs=[configList]
	args = [
	    {
		name = configList
		description = "List of configs to complete."
		enum=[SetupConfigArgs, ObserveConfigArgs]
	    }
	]
    }
    {
	name = cancel
	description = "Actions associated with a specific submit are cancelled. The runID of the submission is used to cancel."
	args = [
	    {
		name = runID
		description = "Identification string of the config arg to cancel.  (NOTE: this may not be necessary if cancel is always applied to the current configuration in progress)."
		type = string
	    }
	]
    }
    {
	name = resume
	description = "Resume a Sequence Component paused by a WaitConfig."
	args = [
	    {
		name = runID
		description = "Identification string of the config arg to resume.  (NOTE: this may not be necessary if resume is always applied to the current configuration in progress)."
		type = string
	    }
	]
    }



    {
	name = SetupConfig(global)
	description = "Perform global command to some of all of the IRIS software systems.  These commands may be folded into the SetupConfig(\"state\") command.  NOTE: This isn't actually a command, but rather the specification of a SetupConfig.  A SetupConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality."
       args = [
           {
	       name = command
	       description = """ 
Command to be executed.  

  * INITIALIZE: Initialize one or all IRIS subsystems.  If no argument is specificed, all subsystems will be initialized.
  * DATUM: Move specified IRIS subsystem to their datum (a.k.a. home or index) position, and/or set to a default configuration.  If no argument is specified, all subsystems will be datumed.
  * STOP: Disable reads and/or stop moving components of the selected IRIS subsystem.  If no agrument is specified, all subsystems will be stopped.
  * PARK: For the specified subsystem, perform operations associated with STOP and then turn off power to electronics, and leave system in configuration in which all hardware can be safely shut down.  If no agrument is specified, all subsystems will be parked.
  * TEST: Perform self-test of specified IRIS subsystem software and hardware systems.  If no agrument is specified, all subsystems will be tested.

"""
	       enum = [INITIALIZE, DATUM, TEST, PARK, STOP]
	   }
	   {
                name = whichSubsystem
                description = "Select subsystem to be initialized."
                enum = [ALL, CSRO, EL, IMG, IFS, SC, DRS]
            }
        ]
    } 
    {
      name = SetupConfig(engineeringState)
      description = """

Configure instrument to match a specific state for engineering purposes.    NOTE: This isn't actually a command, but rather the specification of a SetupConfig.  A SetupConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality.

Accepted states are based on use cases described in IRIS Software Design Document (TMT.INS.PDD.14.024.DRF08) and as follows (this list may evolve):

	  * Warm Active
	  * Warm Stowed
	  * Pumping
	  * Warm Vacuum
	  * Cooling
	  * Stowed
	  * Warming
	  * Pressurizing
	  * Active - Idling
	  * Active - Offline
	  * Active - Online

"""
      args = [
        {
      	  name = state
	  description = desired state to achieve.
          enum = [Warm Active, Warm Stowed, Pumping, Warm Vacuum, Cooling, Stowed, Warming, Pressurizing, Active-Idling, Active-Offline, Active-Online]
        }
      ]
    }
    { 
      name = SetupConfig(mechanical)
      description = "Setup instrument mechanisms for observation.   NOTE: This isn't actually a command, but rather the specification of a SetupConfig.  A SetupConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality."
      args = [
        {
	  name = filter
	  description = "Filter to use for imaging and spectroscopy (TBD confirm list)"
	  enum = [Z, Y, J, H, K, Ks, "H+K notch", CO, BrGamma, PaBeta, H2, FeII, HeI, CaII Trip, J Cont, H Cont, K Cont, Zn1, Zn2, Zn3, Zn4, Yn1, Yn2, Yn3, Yn4, Jn1, Jn2, Jn3, Jn4, Jn5, Hn1, Hn2, Hn3, Hn4, Hn5, Kn1, Kn2, Kn3, Kn4, Kn5] 
        }
        {
          name = scale
	  description = "Platescale for IFS observations"
	  enum = [4, 9, 25, 50]
	  units = mas
        }
        {
          name = spectralResolution
	  description = "Spectral resolution (grating) for IFS observations"
	  enum = [4000-Z, 4000-Y, 4000-J, 4000-H, 4000-K, "4000-H+K", 8000-Z, 8000-Y, 8000-J, 8000-H, 8000-Kn1-3, 8000-Kn4-5, 8000-Kbb, 10000-Z, 10000-Y, 10000-J, 10000-H, 10000-K, Mirror]
        }
	# the following two arguments to config could be broken out into individual functions
	# oiwfs ADC, instrument rotator controlled by AOESW.	
	{
	  name = scienceAdcFollow
	  description = "Enable or disable following of TCS stream for positioning science ADC."
	  type = boolean
	}	
	{
	  name = scienceColdStopFollow
	  description = "Enable or disable following of TCS stream for positioning science cold stop."
	  type = boolean
	}
	# subregions are currently listed as an "additional requirement", and may not need to be implemented.
        {
	  name = imagerDetectorSubregions
	  description = "Subregion extents for imager detectors.  First index specifies which detector, second index is x and y of lower left corner of subregion, third index is x and y of upper right corner of subregion.  TODO: different units/limits for each axis?"
	  type = array
	  dimensions = [4, 2, 2]
	  items = {
	       type = integer
	       minimum = 0
	       maximum = 4095
	  }
	  units = pixel
        }
        {
	  name = ifsDetectorSubregion
	  description = "Subregion extents for imager detector.  First index is x and y of lower left corner of subregion, second index is x and y of upper right corner of subregion."
	  type = array
	  dimensions = [2, 2]
	  items = {
	       type = integer
	       minimum = 0
	       maximum = 4095
	  }
	  units = pixel
        }
      ]
    } 
    {
	name = SetupConfig(observer)
	description = "Configure IRIS with specified observer properties.NOTE: This isn't actually a command, but rather the specification of a SetupConfig.  A SetupConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality. "
	args = [
	    {
		name = observer
		description = "Observer name(s)"
		type = string
		default = "unknown"
	    }
	    {
		name = piName
		description = "Name(s) of PI"
		type = string
		default = "unknown"
	    }
	    {
		name = partner
		description = "Name(s) of partner(s)"
		type = string
		default = "unknown"
	    }
	    {
		name = proposal
		description = "Proposal ID"
		type = string
		default = "unknown"
	    }
	    {
		name = dataDirectory
		description = "URI for data directory"
		type = string
	    }
	]
    }
    {
	name = SetupConfig(observationBlock)
	description = "Configure IRIS with specified observation block properties.NOTE: This isn't actually a command, but rather the specification of a SetupConfig.  A SetupConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality. "
	args = [
	    {
		name = observationID
		description = "Identification string of observation"
		type = string
		default = "unknown"
	    }
	    {
		name = observationType
		description = "Type of observation (science, star, calibration)"
		enum = [science, star, calibration]
	    }
	    {
		name = object
		description = "Object Name"
		type = string
		default = "unknown"
	    }
	    {
		name = objectRA
		description = "Object right ascension"
		type = float
	    }
	    {
		name = objectDec
		description = "Object declination"
		type = float
	    }
	    {
		name = objectPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string 
		default = "unknown"
	    }
	    {
		name = skyPattern
		description = "Dither pattern for object frames.  This will likely eventually be a TBD enum type"
		type = string
		default = "unknown"
	    }
	    {
		name = objectPositions
		description = "Number of positions in object dither pattern"
		type = integer
		default = 1
		minimum = 0
	    }
	    {
		name = skyPositions
		description = "Number of positions in sky dither pattern"
		type = integer
		default = 0
		minimum = 0
	    }
	    {
		name = ditherCoordinates
		description = "Coordinate system for dither offset values"
		enum = [sky, instrument]
	    }
	]
    }
    { 
      name = ObserveConfig
      description = "Perform a series of one or more exposures with either the Imager, IFS, or both.  NOTE: This isn't actually a command, but rather the specification of an ObserveConfig.  An ObserveConfigArgs list used by the submit and oneway commands may be one or more of these.  It is listed here in this way to adapt to the current model file schema so that we can take advantage of the ICD-DB functionality."
      args = [
	# the following sync options are WAGs and need to be checked with science team
        {
          name = sync
	  description = "How to synchronize imager and IFS exposures.  Ignored if either imagerRepeats or ifsRepeats is zero.  Options TBD. TODO descriptions"
	  enum = [None, First frame, Each frame, Each IFS frame]
        }
        {
          name = imagerRepeats
	  description = "Number of imager exposures to take."
	  type = integer
	  minimum = 0
        }
        {
          name = ifsRepeats
	  description = "Number of IFS exposures to take."
	  type = integer
	  minimum = 0
        }
        { 
          name = imagerIntegrationTime
          description = "Integration time in ms for imager exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = ifsIntegrationTime
          description = "Integration time in ms for IFS exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = imagerCoadds
          description = "Number of coadditions for imager exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
        { 
          name = ifsCoadds
          description = "Number of coadditions for IFS exposures."
	  type = integer
          minimum = 0 // TBD
	  units = ms // TBD
        }
      ]
    }

]

send = [
     // cryotemp assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     {
	name=setTemperature
     	subsystem=IRIS
     	component=cryotemp-assembly
     }
     // pressure assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=pressure-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=pressure-assembly
     }
     // windowheater assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     {
	name=setTemperature
     	subsystem=IRIS
     	component=windowheater-assembly
     }
     // cabinet-environment assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=cabinet-environment-assembly
     }
     // power assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOn
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOff
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOnAll
     	subsystem=IRIS
     	component=power-assembly
     }
     {
	name=turnOffAll
     	subsystem=IRIS
     	component=power-assembly
     }
     // ambient-temperature assembly
     {
	name=DATUM
     	subsystem=IRIS
     	component=ambient-temperature-assembly
     }
     {
	name=START
     	subsystem=IRIS
     	component=ambient-temperature-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=ambient-temperature-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=ambient-temperature-assembly
     }
     // sci-adc assembly
     {
	name=RETRACT_DATUM
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_DATUM
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_INIT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_INIT
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_TEST
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_TEST
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_FOLLOW
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_MOVE
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_LOCK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_LOCK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_UNLOCK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_UNLOCK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_PARK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_PARK
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=RETRACT_STOP
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     {
	name=PRISM_STOP
     	subsystem=IRIS
     	component=sci-adc-assembly
     }
     // coldstop assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=FOLLOW
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=MOVE
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=coldstop-assembly
     }
     // filter assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=TEST
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=MOVE
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=sci-filter-assembly
     }
     // pupilview assembly
     {
	name=DETECTOR_INIT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_INIT
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_TEST
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_TEST
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_LOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_LOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_UNLOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_UNLOCK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_START_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_ABORT_EXPOSURE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_DATUM
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=DETECTOR_PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_MOVE
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_PARK
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     {
	name=MIRROR_STOP
     	subsystem=IRIS
     	component=pupilview-assembly
     }
     // imager-detector assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
    {
	name=TEST
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=imager-detector-assembly
     }
     // ifs-detector assembly
     {
	name=INIT
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
    {
	name=TEST
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=START_EXPOSURE
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=ABORT_EXPOSURE
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=ifs-detector-assembly
     }
     // scale assembly
     {
	name=RESET
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=CHANGE_SCALE
     	subsystem=IRIS
     	component=scale-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=scale-assembly
     }
     // spectralres assembly
     {
	name=RESET
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=DATUM
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=LOCK
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=UNLOCK
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=PARK
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=CHANGE_RESOLUTION
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=CHANGE_MASK
     	subsystem=IRIS
     	component=spectralres-assembly
     }
     {
	name=STOP
     	subsystem=IRIS
     	component=spectralres-assembly
     }
    // csro env assembly
     {
        name=SET_ENCLOSURE_TEMP
	subsystem=IRIS
	component=csro-env-assembly
     }
    // drs assembly
    {
	name = START
	subsystem = IRIS
	component = drs-assembly
    }
    {
	name = STOP
	subsystem = IRIS
	component = drs-assembly
    }
    {
	name = DATUM
	subsystem = IRIS
	component = drs-assembly
    }
    {
	name = TEST
	subsystem = IRIS
	component = drs-assembly
    }
    {
	name = configureObserver
	subsystem = IRIS
	component = drs-assembly
    }
    {
	name = configureObservation
	subsystem = IRIS
	component = drs-assembly
    }
]
