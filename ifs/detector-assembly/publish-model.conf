subsystem = IRIS
component = ifs-detector-assembly

publish {
    telemetry = [
	{
	    name = currentConfig
	    description = "Configuration of exposure in progress or last completed"
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
		{
	    	    name = intergrationTime
	    	    description  = "Integration time of exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0 
	    	    units = ms
		}
	    	{
	    	    name = reads
	    	    description = "Number of reads in exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = coadds
	    	    description = "Number of coadds for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = repeats
	    	    description = "Number of repeats of exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = resets
	    	    description = "Number of repeats of exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = subregionStartX
	    	    description = "Leftmost column(0-based) pixel of subregion for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 0
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionStartY
	    	    description = "Bottommost row(0-based) pixel of subregion for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 0
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionEndX
	    	    description = "Rightmost column(0-based) pixel of subregion for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 4095
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionEndY
	    	    description = "Topmost row(0-based) pixel of subregion for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 4095
	    	    units = pixel
	    	}
	    ]
    	}
    	{
	    name = nextConfig
	    description = "Configuration of next exposure to be taken"
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
	    	{
	    	    name = intergrationTime
	    	    description  = "Integration time of next exposure to be taken"
	    	    type = integer
	    	    minimum = 0 
	    	    units = ms
	    	}
	    	{
	    	    name = reads
	    	    description = "Number of reads in next exposure to be taken"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = coadds
	    	    description = "Number of coadds for next exposure to be taken"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = repeats
	    	    description = "Number of repeats of next exposure to be taken"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = resets
	    	    description = "Number of repeats of next exposure to be taken"
	    	    type = integer
	    	    minimum = 1
	    	    default = 1
	    	}
	    	{
	    	    name = subregionStartX
	    	    description = "Leftmost column(0-based) pixel of subregion for next exposure to be taken"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 0
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionStartY
	    	    description = "Bottommost row(0-based) pixel of subregion for next exposure to be taken"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 0
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionEndX
	    	    description = "Rightmost column(0-based) pixel of subregion for next exposure to be taken"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 4095
	    	    units = pixel
	    	}
	    	{
	    	    name = subregionEndY
	    	    description = "Topmost row(0-based) pixel of subregion for next exposure to be taken"
	    	    type = integer
	    	    minimum = 0
	    	    maximum = 4095
	    	    default = 4095
	    	    units = pixel
	    	}
	    ]
    	}
    	{
	    name = referencePixelSubtraction
	    description = "Status of reference pixel subtraction"
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
	    	{
	    	    name = performed
	    	    description  = "Flag for whether reference pixel subtraction is performed"
	    	    type = boolean
	    	    default = TRUE
	    	}
	    	{
	    	    name = type
	    	    description  = "Type of reference pixel subtraction performed"
	    	    enum = [TBD1, TBD2, TBD3]
	    	    default = TBD1
	    	}	    		
	    ]
	}
	{
	    name = gain
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
	    	{
	    	    name = gain
	    	    description = "Convsersion of photoelectrons to counts"
	    	    type = float
	    	    units = e-/ADU
	    	    
	    	}
	    ]
	}	    
	
	{
	    name = status
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
                {
		    name = status
		    description = "Overall status of system."
		    type = string
                default = UNKNOWN
		    
                }
                {
		    name = detectorStatus
		    description = """
Status of each detector.

* __OFF__      : The detector power is off.
* __BOOTING__  : Powering on the detector.
* __IDLING__   : The detector is idling.
* __EXPOSURE__ : The detector is taking an exposure.
* __SHUTDOWN__ : powering off the detector.
* __UKNOWN__   : Unknown state

"""
		    enum = [OFF_LOCKED, OFF_UNLOCKED, BOOTING, IDLING, EXPOSURE, SHUTDOWN, UNKNOWN]
                default = UNKNOWN
                }
	    ]
        }
	{
	    name = flags
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
	    	{
	    	    name = isAborted
	    	    description = "Flag for whether exposure in progress or last completed exposure has been aborted"
	    	    type = boolean
	    	default = FALSE
	    	}
	    	{
	    	    name = abortInProgress
	    	    description = "Flag for whether exposure in progress is currently being aborted"
	    	    type = boolean
	    	default = FALSE
	    	}
	    	{
	    	    name = observationInProgress
	    	    description = "Flag for whether an observation is in progress"
	    	    type = boolean
	    	default = FALSE
	    	}
	    	{
	    	    name = exposureInProgress
	    	    description = "Flag for whether exposure is in progress"
	    	    type = boolean
	    	default = FALSE
	    	}
	    ]
	}
	{
	    name = counts
	    minRate = 1
	    maxRate = 1
	    archive = true
	    archiveRate = 1
	    attributes = [
	    	{
	    	    name = readsDone
	    	    description = "Number of reads completed for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	default = 0
	    	}
	    	{
	    	    name = groups
	    	    description = "Number of groups completed for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	default = 0
	    	}
	    	{
	    	    name = coaddsDone
	    	    description = "Number of coadds completed for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	default = 0
	    	}
	    	{
	    	    name = repeatsDone
	    	    description = "Number of exposure repeats completed for exposure in progress or last completed"
	    	    type = integer
	    	    minimum = 0
	    	default = 0
	    	}
	    ]
	}
    ]
    events = [
        {
	    name = startExposure
	    description = "This event notifies that a new exposure started."
	    archive = true
	    attributes = [
                {
		    name = exposure
		    description = "Exposure # within the observation."
		    type = integer
		    minimum = 0
                }
                {
		    name = obsId
		    description = "Observation ID which the current exposure belongs to."
		    type = string
		    minimum = 0
                }
	    ]
        }
        {
	    name = readoutCompleted
	    description = "This event notifies that one readout is saved to DSK-DRS so that DRS can start processing the readout on the disk."
	    archive = true
	    attributes = [
                {
		    name = detector
		    description = "Detector # from which the readout is generated."
		    type = integer
		    minimum = 1
		    maximum = 4
                }
                {
		    name = read
		    description = "Read # of the readout."
		    type = integer
		    minimum = 0
                }
                {
		    name = ramp
		    description = "Ramp # which the readout belongs to."
		    type = integer
		    minimum = 0
                }
                {
		    name = exposure
		    description = "Exposure # which the ramp belongs to."
		    type = integer
		    minimum = 0
                }
                {
		    name = obsId
		    description = "Observation ID which the exposure belongs to."
		    type = string
                }
	    ]
        }
        {
	    name = endExposure
	    description = "This event notifies that an exposure is finished."
	    archive = true
	    attributes = [
                {
		    name = exposure
		    description = "Exposure # within the observation."
		    type = integer
		    minimum = 0
                }
                {
		    name = obsId
		    description = "Observation ID which the current exposure belongs to."
		    type = string
		    minimum = 0
                }
	    ]
        }
        {
	    name = aborting
	    description = "This event notifies that this assembly starts to try aborting the current exposure. When the abort is completed, the corresponding 'aborted' event will be sent. If the exposure successfully finishes before aborting, 'endExposure' event will be sent."
	    archive = true
	    attributes = [
                {
		    name = exposure
		    description = "Exposure # of the exposure to be aborted."
		    type = integer
		    minimum = 0
                }
                {
		    name = obsId
		    description = "Observation ID which the current exposure belongs to."
		    type = string
                }
                {
		    name = reason
		    description = """
Trigger of this abort event. Meaning of each enum value is as below:

* COMMAND : ABORT_EXPOSURE command is received.
* DISK    : There is an error when writing readout data to disk storage (e.g. disk storage is full, connection to the disk storage is lost).
* DC      : Detector controller encounters an error.
* UNKNOWN : Unknown reason.

"""
		    enum = [COMMAND, DISK, DC, UNKNOWN]
                }
                {
		    name = detail
		    description = "More detailed reason why the exposure is aborted if the trigger is some error."
		    type = string
                }
	    ]
        }
        {
	    name = aborted
	    description = "This event notifies that the current exposure was aborted."
	    archive = true
	    attributes = [
                {
		    name = exposure
		    description = "Exposure # of the aborted exposure."
		    type = integer
		    minimum = 0
                }
                {
		    name = obsId
		    description = "Observation ID which the current exposure belongs to."
		    type = string
                }
                {
		    name = reason
		    description = """
Trigger of this abort event. Meaning of each enum value is as below:

* COMMAND : ABORT_EXPOSURE command is received.
* DISK    : There is an error when writing readout data to disk storage (e.g. disk storage is full, connection to the disk storage is lost).
* DC      : Detector controller encounters an error.
* UNKNOWN : Unknown reason.

"""
		    enum = [COMMAND, DISK, DC, UNKNOWN]
                }
                {
		    name = detail
		    description = "More detailed reason why the exposure is aborted if the trigger is some error."
		    type = string
                }
	    ]
        }

    ]	
}
