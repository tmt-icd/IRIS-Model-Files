subsystem = IRIS
component = imager.pupilview

description = ""

receive = [
  {
    name = DETECTOR-init
    description = """
Initializes this functional group and reloads the configuration files. It does not intialize the underlying HCDs, trigger any exposure or initiate any action on the hardware.

Preemptable: no
"""
    completionType = longRunning
  }
  {
    name           = DETECTOR-test
    description    = """
This command executes a self-test. Action to be taken is TBD.

This command never starts an exposure nor reset the detectors.
"""
    completionType = immediate
    role           = "eng"
  }
  {
    name = DETECTOR-loadConfiguration
    description = """
This command validates the given exposure configuration and saves them internally in this functional group, the underlying Detector HCD and/or the detector controller. The next exposure will be executed with the specified configuration.

Preemptable: TBD
"""
    completionType = longRunning
    preconditions  = ["irDetectorExposureState.exposureInProgress == false &&",
                      "irDetectorExposureState.abortInProgress == false"]
    postconditions = ["irDetectorExposureState.exposureInProgress == false &&",
                      "irDetectorExposureState.abortInProgress == false &&",
                      "irDetectorExposureState.operationalState == READY"]
    args = [
      {
        name        = readouts
        description = "Number of full frame readouts per ramp."
        type        = integer
        minimum     = 2
        default     = 2
      }
      {
        name        = ramps
        description = "Number of ramps for the full frame in one exposure."
        type        = integer
        minimum     = 1
        default     = 1
      }
      {
        name        = sampling
        description = "Sampling method for the full frame"
        enum        = [MCDS, UTR]
        default     = UTR
      }
      {
        name        = coadd
        description = "Number of coadds for MCDS for the full frame. If it is one, the sampling mode is effectively the same as CDS."
        type        = integer
        minimum     = 1
        default     = 1
      }
    ]
  }
  {
    name = DETECTOR-exposure
    description = """
This command starts a new science exposure with the pre-loaded configuration. This command is considered successfully completed when the specified exposure time has been elapsed without any error.

Preemptable: yes
"""
    completionType = longRunning
    preconditions  = ["DETECTOR-state.enabled == true &&",
                      "irDetectorExposureState.exposureInProgress == false &&",
                      "irDetectorExposureState.abortInProgress == false &&",
                      "irDetectorExposureState.operationalState == READY"]
    postconditions = ["DETECTOR-state.enabled == true &&",
                      "irDetectorExposureState.exposureInProgress == false &&",
                      "irDetectorExposureState.abortInProgress == false &&",
                      "irDetectorExposureState.operationalState == READY"]
    args            = [
      {
        name        = obsId
        description = "Observation ID. If not given, the exposure ID is replaced by the UTC time."
        type        = string
      }
      {
        name        = exposureNumber
        description = "Exposure number."
        type        = integer
        minimum     = 1
        maximum     = 9999
        default     = 1
      }
    ]
  }
  {
    name = DETECTOR-abortExposure
    description = """
Cancels the science exposure in progress. This does not stop the ongoing continuous ODGW exposure.

Preemptable: no
"""
    completionType = longRunning
  }
  {
    name = DETECTOR-datum
    description = "TBD"
    completionType = immediate
  }
  {
    name = DETECTOR-park
    description = "TBD"
    completionType = immediate
  }
  {
    name = DETECTOR-disable
    description = """
This command disables this functional group. Any commands that triggers a new exposure will be rejected when disabled.

This command is expected to be called before starting the cool-down or warm-up procedure.
"""
    completionType = immediate
    preconditions  = ["DETECTOR-state.enabled == true &&",
                      "irDetectorExposureState.exposureInProgress == true"]
    postconditions = ["DETECTOR-state.enabled == false"]
  }
  {
    name = DETECTOR-enable
    description = """
This command enables this functional group.

This command is expected to be called after the cool-down or warm-up procedure is completed.
"""
    completionType = immediate
    preconditions  = ["DETECTOR-state.enabled == false"]
    postconditions = ["DETECTOR-state.enabled == true"]
  }
  {
    name = DETECTOR-debug
    description = "This will set the current debug level."
    completionType = immediate
    role = "eng"
  }


    {
        name = MIRROR-init
        description = """
This command initializes the MIRROR functional group and reloads the configuration files. It does not initialize the underlying HCDs, clear the datum, or trigger any motion, but it stops the ongoing motion and deenergizes the motor.

If the stage position is halfway, the datum may be lost as a result of re-initialization.

Preemptable: no
"""
        completionType = longRunning
    }
    {
        name = MIRROR-datum
        description = """Start datuming the fold mirror stage.

Preemptable: yes
"""
        completionType = longRunning
        preconditions  = [
                          "MIRROR-state.enabled == true &&",
                          "MIRROR-state.temperature != HIGH &&",
                          "MIRROR-state.temperature != UNKNOWN"
                         ]
        postconditions = [
                          "MIRROR-state.motion == IN_POSITION &&",
                          "MIRROR-state.selection == RETRACTED &&",
                          "MIRROR-state.power == false"
                         ]
    }
    {
        name = MIRROR-select
        description = """
This command inserts or retracts the fold mirror into/from the science light path.

Preemptable: yes
"""
        requiredArgs = [target]
        args = [
            {
                name = target
                description = "Target position."
                enum = [DEPLOY, RETRACT]
            }
        ]
        completionType = longRunning
        preconditions  = [
                           "(MIRROR-state.motion == DATUMED:IN_POSITION || MIRROR-state.motion == DATUMED:HALFWAY) &&",
                           "MIRROR-state.enabled == true &&",
                           "MIRROR-state.temperature != HIGH &&",
                           "MIRROR-state.temperature != UNKNOWN"

                          ]
        postconditions = [
                          "MIRROR-state.motion == IN_POSITION &&",
                          "(MIRROR-state.selection == DEPLOYED || MIRROR-state.selection == RETRACTED) &&",
                          "MIRROR-state.power == false"
                         ]
    }
    {
        name = MIRROR-move
        description = """
This command moves the fold mirror stage to an arbitrary position relative to the current position.

Preemptable: yes
"""
        requiredArgs = [target]
        args = [
            {
                name = target
                description = "Target position relative to the current position."
                type = double
                units = step
            }
            {
                name = velocity
                description = "Motion velocity."
                type = double
                units = step/s
                exclusiveMinimum = 0
                default = MIRROR-RawMotionVelocity
            }
            {
                name = acceleration
                description = "Motion acceleration."
                type = double
                units = step/s<sup>2</sup>
                exclusiveMinimum = 0
                default = MIRROR-RawMotionAcceleration
            }
            {
                name = minimumJerkTime
                description = "Minimum jerk time."
                type = double
                units = s
                default = MIRROR-RawMinJerkTime
            }
            {
                name = maximumJerkTime
                description = "Maximum jerk time."
                type = double
                units = s
                default = MIRROR-RawMaxJerkTime
            }
        ]
        completionType = longRunning
        role = "eng"
        preconditions  = [
                           "(MIRROR-state.motion == DATUMED:IN_POSITION || MIRROR-state.motion == DATUMED:HALFWAY || MIRROR-state.motion == MOVING:RAW) &&",
                           "MIRROR-state.enabled == true &&",
                           "MIRROR-state.temperature != HIGH &&",
                           "MIRROR-state.temperature != UNKNOWN"
                         ]
        postconditions = [
                          "(MIRROR-state.motion == IN_POSITION || MIRROR-state.motion == HALFWAY) &&",
                          "MIRROR-state.power == false"
                          ]
    }
    {
        name = MIRROR-disable
        description = """
This command disables this functional group. Any commands that trigger a motion or turn on the motor current will be rejected when disabled.

This command is expected to be called before starting a cool-down or warm-up procedure.
"""
        completionType = immediate
        preconditions  = [
                          "MIRROR-state.move == false &&",
                          "MIRROR-state.power == false &&",
                          "MIRROR-state.enabled == true"
                         ]
        postconditions = ["MIRROR-state.enabled == false"]
    }
    {
        name = MIRROR-enable
        description = """
This command enables this functional group.

This command is expected to be called after the cool-down or warm-up procedure is completed.
"""
        completionType = immediate
        preconditions  = ["MIRROR-state.enabled == false"]
        postconditions = ["MIRROR-state.enabled == true"]
    }
    {
        name = MIRROR-park
        description = "This command does nothing."
        completionType = immediate
    }
    {
        name = MIRROR-stop
        description = """
Stop the motion of the mirror stage and turn off the motor power.

Preemptable: no
"""
        completionType = longRunning
        preconditions  = ["MIRROR-state.motion == DATUMING || MIRROR-state.motion == MOVING:* || MIRROR-state.motion == ERROR"]
        postconditions = [
                           "(MIRROR-state.motion == UNDATUMED || MIRROR-state.motion == DATUMED:IN_POSITION || MIRROR-state.motion == DATUMED:HALFWAY || MIRROR-state.motion == ERROR) &&",
                           "MIRROR-state.power == false"
                          ]
    }
    {
        name = MIRROR-test
        description = "This command executes a self-test. The actual action to be taken is TBD. This command never drives the mirror stage."
        completionType = immediate
        role = "eng"
    }
    {
        name = MIRROR-debug
        description = "This command sets the current debug level."
        completionType = immediate
        role = "eng"
    }
    {
        name = MIRROR-setTemperatureThreshold
        description = "Change the overheat protection temperature threshold."
        completionType = immediate
        requiredArgs = [threshold]
        args = [
            {
                name = threshold
                description = "New threshold."
                type = float
                units = K
                minimum = 0
            }
        ]
        role = "eng"
    }
    
    {
        name = shutdown
        description = "Stop this Assembly. It does not send this command down to the underlying HCDs. The on-going motion or exposure may continue after shutdown."
        completionType = longRunning
    }
]
