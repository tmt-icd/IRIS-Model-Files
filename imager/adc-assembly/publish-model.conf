subsystem = IRIS
component = imager.adc

publish {

  events = [
     {
        name = odgwShift
        description = """
IRIS publishes the expected ADC image shifts of the (up to 4) IRIS ODGW position demands


<em>
Discussion: The ADC will shift an image position in a manner that depends upon the current state of the ADC. Since the ODGWs are viewed through the science ADC, any telescope pointing shifts based on the sciShift event published by this assembly should also remove shifts in the ODGW positions. However, if the science ADC causes appreciable distortion, this published event can be used by the TCS to make small adjustments to the ODGW position demands to account for this distortion. The reference wavelength used to calculate the shift is tcs.cm.iris.imgCurAtmDispersion.referenceWavelength.
</em>
        """
        archive = true
        attributes = [
            {
                name = odgw1Shift
                description  = "2 element array holding x, y values (range TBD) in the FCRS<sub>IRIS-ROT</sub>, evaluated at the reference wavelength"
                type = array
                dimensions: [2]
                items = {
                    type = double
                    units = mm
                }
            }
            {
                name = odgw2Shift
                description  = "2 element array holding x, y values (range TBD) in the FCRS<sub>IRIS-ROT</sub>, evaluated at the reference wavelength"
                type = array
                dimensions: [2]
                items = {
                    type = double
                    units = mm
                }
            }
            {
                name = odgw3Shift
                description  = "2 element array holding x, y values (range TBD) in the FCRS<sub>IRIS-ROT</sub>, evaluated at the reference wavelength"
                type = array
                dimensions: [2]
                items = {
                    type = double
                    units = mm
                }
            }
            {
                name = odgw4Shift
                description  = "2 element array holding x, y values (range TBD) in the FCRS<sub>IRIS-ROT</sub>, evaluated at the reference wavelength"
                type = array
                dimensions: [2]
                items = {
                    type = double
                    units = mm
                }
            }
        ]
     }

{
        name = sciShift
        description = """
IRIS publishes the expected ADC image shift of the scient target

*Discussion: The ADC will shift an image position in a manner that depends upon the current state of the ADC. The estimated image shift (inferred from optical models) is sent from IRIS to the TCS so that the TCS can adjust the telescope pointing, thereby stabilizing the science target on the IRIS imager. The reference wavelength used to calculate the shift is tcs.cm.iris.imgCurAtmDispersion.referenceWavelength.*
        """
        archive = true
        attributes = [
            {
                name = shift
                description  = "2 element array holding x, y values (range TBD) in the FCRS<sub>IRIS-ROT</sub>, evaluated at the reference wavelength"
                type = array
                dimensions: [2]
                items = {
                    type = double
                    units = mm
                }
            }
        ]
     }

    {
      name              = state
      description       = """Science ADC assembly overall state of prism and deploy mechanisms
      
      <em>
      Discussion: The onTarget attribute of this event should be used to determine if the both the prism and deploy mechanisms are working as intended during observations. If not, examine the PRISM_state and RETRACT_state values to determine the source of the problem.
      </em>
      """ 
      attributes = [
        {
          name          = cmd
          description   = "command state"
          enum          = [UNINITIALIZED,READY,BUSY,CONTINUOUS]
        }
        {
          name          = move
          description   = "At least one mechanism within the Science ADC (prism or deployment) is moving"
          enum          = [STOPPED,MOVING]
        }
        {
          name          = onTarget
          description   = "All of the Science ADC mechanisms (prism and deployment) are on target."
          type          = boolean
        }
      ]
    }

    {
      name = PRISM_state
      description = "Prism functional group state"
      archive = true
      attributes = [
        {
            name = cmd
            description  = "command state"
            enum = [UNINITIALIZED, READY, BUSY, COTINUOUS]
        }
        {
            name = move
            description  = "state of mechanisms that can move"
            enum = [UNINDEXED, INDEXING, INDEXED, MOVING]
        }
        {
            name = onTarget
            description  = """
State of mechanisms with respect to requested target position.

This attribute turns to be true when the posiiton errors are withtin the prescribed accuracies. If this state is false, it means that a new exposure should not be started. If this value becomes false during an exposure, the quality of that exposure cannot be guaranteed.
"""
            type = boolean
        }
        {
            name = debug
            description  = "debug level"
            enum = [TBD]
        }
        {
            name = locked
            description = "Indicates whether this functional group is locked. Any command that initiates motion will be rejected when locked."
            type = boolean
        }
        {
            name = interlock
            description = "Indicates whether the motion is prohibited due to the interlock signal from Safety HCD."
            type = boolean
        }
      ]
    }
    {
      name              = PRISM_target
      description       = "Target positions of ADC prisms""" 
      attributes        = [
        {
          name          = trackID
          description   = "Unique TCS target ID that is incremented (with rollover) each time the TCS is instructed to move to a new target."
          type          = long
        }
        {
          name          = power
          description   = "Target power (differential rotation angle, TBD) for ADC, inferred from dispersion information."
          type          = double
          units         = degrees
        }
        {
          name          = orientation
          description   = "Target orientation for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }
        {
          name          = rotationA
          description   = "Target rotation of the A stage for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }
        {
          name          = rotationB
          description   = "Target rotation of the B stage for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }

      ]
    }
    {
      name = PRISM_current
      description = "Current positions of ADC prisms."
      archive = true
      attributes = [
        {
          name          = power
          description   = "Current power (differential rotation angle, TBD) for ADC, inferred from dispersion information."
          type          = double
          units         = degrees
        }
        {
          name          = orientation
          description   = "Current orientation for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }
        {
          name          = rotationA
          description   = "Current rotation of the A stage for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }
        {
          name          = rotationB
          description   = "Current rotation of the B stage for ADC in FCRS<sub>IRIS-ROT</sub>"
          type          = double
          units         = degrees
        }
        {
          name          = error_rotationA
          description   = "Error in rotation of the A stage for ADC"
          type          = double
          units         = degrees
        }
        {
          name          = error_rotationB
          description   = "Error in rotation of the B stage for ADC"
          type          = double
          units         = degrees
        }      
      ]
    }
    {
      name = RETRACT_state
      description = "ADC retraction functional group state"
      archive = true
      attributes = [
        {
            name = cmd
            description  = "command state"
            enum = [UNINITIALIZED, READY, BUSY, COTINUOUS]
        }
        {
            name = move
            description  = "state of mechanisms that can move"
            enum = [UNINDEXED, INDEXING, INDEXED, MOVING]
        }
        {
            name = onTarget
            description  = "state of mechanisms with respect to requested target position"
            type = boolean
        }
        {
            name = debug
            description  = "debug level"
            enum = [TBD]
        }
        {
            name = locked
            description = "Indicates whether this functional group is locked. Any command that initiates motion will be rejected when locked."
            type = boolean
        }
        {
            name = interlock
            description = "Indicates whether the motion is prohibited due to the interlock signal from Safety HCD."
            type = boolean
        }
      ]
    }
    {
      name = RETRACT_cmdStatus
      description = "Standard assembly command status"
      archive = true
      attributes = [
        {
            name = command
            description  = "Name of the most recent command."
            type = string
        }
        {
            name = args
            description  = "String representation of the command arguments."
            type = string
        }
        {
            name = caller
            description  = "String identifying the caller (if available)"
            type = string
        }
        {
            name = runID
            description  = "A run ID associated with the command."
            type = integer
        }
        {
            name = ack
            description  = "Initial acknowledgement"
            enum = [ACCEPTED, REJECTED]
        }
        {
            name = ackMsg
            description  = "Acknowledgement string explaining why a command is REJECTED. This string will generally be cleared if the command is ACCEPTED."
            type = string
        }
        {
            name = completion
            description  = "Status of completion"
            enum = [INPROGRESS, SUCCESS, FAILED, INTERRUPTED, REJECTED]
        }
        {
            name = completionMsg
            description  = "The message string is cleared when a command has been successfully acknowledged and/or is INPROGRESS. The message string is filled in if the command fails."
            type = string
        }
      ]
    }
    {
      name = RETRACT_position
      description = "Current position of the linear stage."
      archive = true
      attributes = [
        {
          name = discretePosition
          description = """
Discrete position of the linear stage.

* __IN__     : ADC is inserted in the science light path and ready for observation using ADC.
* __HALFWAY__: Some motion is on-going, or ADC is not in either the inserted position or the retracted position.
* __OUT__    : ADC is completely retracted from the sicence light path and ready for the observation which does not use ADC.
* __UNKNOWN__: Unknown state.
"""
	  enum = [IN, HALFWAY, OUT, UNKNOWN]
        }
        {
          name = position
          description = "The current position."
	      type = float
          units = mm
        }
      ]
    }
    {
      name = RETRACT_stageConf
      description = """
Current configuration of the linear stage.

This telemetry can be used to check if the current configuration is as intended. If not, the user shoud edit the configuration via Configuration Service or a local file, and re-initialize this assembly so that the latest configuration will be reloaded. This telemetry is updated only when initialization is performed.
"""
      archive = true
      attributes = [
        {
          name = insertedPosition
          description = """
Inserted position from the home position.

__TODO__: Define maximum and minimum value.
"""
          type = float
          units = mm
        }
        {
          name = insertedPositionDelta
          description = """
Acceptable positioning deviation at the inserted position.

__TODO__: Define maximum and minimum value.
"""
          type = float
          units = mm
        }
        {
          name = retractedPosition
          description = """
Retracted position from the home position

__TODO__: Define maximum and minimum value.
"""
          type = float
          units = mm
        }
        {
          name = retractedPositionDelta
          description = """
Acceptable positioning deviation at the retracted position.

__TODO__: Define maximum and minimum value.
"""
          type = float
          units = mm
        }
        {
          name = acceleration
          description = """
Acceleration of trapezoidal profile for normal motion caused by SELECT command.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to accelerate to the top speed.
"""
          type = float
          units = mm/s/s
        }
        {
          name = deceleration
          description = """
Deceleration of trapezoidal profile for normal motion caused by SELECT command.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.
"""
          type = float
          units = mm/s/s
        }
        {
          name = velocity
          description = """
Maximum velocity of trapezoipdal profile for normal motion caused by SELECT command.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.

__TBD__: Don't we need to define base velocity (start/stop velocity)? Couldn't find equivalent parameter in [Manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf).
"""
          type = float
          units = mm/s
        }
        {
          name = smoothing
          description = """
Smoothing factor of trapezoidal profile for normal motion caused by SELECT command. See 'Motion Smoothing' chapter in [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf) for more details. The argument of KS command corresponds to this factor. 0.25 means no smoothing, and 64 means the maximum smoothing.

__TODO__: Check if the type should be integer or float. According to [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf), this value is 'an integer from 0.25 to 64 and represents the amount of smoothing', but 0.25 is not an integer...

__TBD__: Maybe it would be useful to map this value to the range between 0 to 1 for simplicity.
"""
          type = float
          minimum = 0.25
          maximum = 64
        }
        {
          name = accelerationHoming
          description = """
Acceleration of trapezoidal profile for homing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to accelerate to the top speed.
"""
          type = float
          units = mm/s/s
        }
        {
          name = decelerationHoming
          description = """
Deceleration of trapezoidal profile for homoing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.
"""
          type = float
          units = mm/s/s
        }
        {
          name = velocityHoming
          description = """
Maximum velocity of trapezoipdal profile for homing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.

__TBD__: Don't we need to define base velocity (start/stop velocity)? Couldn't find equivalent parameter in [Manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf).
"""
          type = float
          units = mm/s
        }
        {
          name = smoothingHoming
          description = """
Smoothing factor of trapezoidal profile for homing. See 'Motion Smoothing' chapter in [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf) for more details. The argument of KS command corresponds to this factor. 0.25 means no smoothing, and 64 means the maximum smoothing.

__TODO__: Check if the type should be integer or float. According to [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf), this value is 'an integer from 0.25 to 64 and represents the amount of smoothing', but 0.25 is not an integer...

__TBD__: Maybe it would be useful to map this value to the range between 0 to 1 for simplicity.

"""
          type = float
          minimum = 0.25
          maximum = 64
        }
        {
          name = conversion
          description = "Converstion factor to convert raw steps to phyisical distance."
          type = float
          units = mm/step
        }
        {
          name = temperatureThreshold
          description = "Temperature threashold for overheating protection."
          type = float
          units = K
        }
        {
          name = motorCurrent
          description = """
The motor current for this stage.

__TDB__: Define the range, or the possible values.
"""
          type = float
          units = A
        }
      ]
    }
    {
      name = PRISM_cmdStatus
      description = "Standard assembly command status"
      archive = true
      attributes = [
        {
            name = command
            description  = "Name of the most recent command."
            type = string
        }
        {
            name = args
            description  = "String representation of the command arguments."
            type = string
        }
        {
            name = caller
            description  = "String identifying the caller (if available)"
            type = string
        }
        {
            name = runID
            description  = "A run ID associated with the command."
            type = integer
        }
        {
            name = ack
            description  = "Initial acknowledgement"
            enum = [ACCEPTED, REJECTED]
        }
        {
            name = ackMsg
            description  = "Acknowledgement string explaining why a command is REJECTED. This string will generally be cleared if the command is ACCEPTED."
            type = string
        }
        {
            name = completion
            description  = "Status of completion"
            enum = [INPROGRESS, SUCCESS, FAILED, INTERRUPTED, REJECTED]
        }
        {
            name = completionMsg
            description  = "The message string is cleared when a command has been successfully acknowledged and/or is INPROGRESS. The message string is filled in if the command fails."
            type = string
        }
      ]
    }
    {
      name = PRISM_following
      description = """
This is a single boolean value (or tuple of two boolean values each of which represents one rotary stage) which indicates whether all the stages keep moving AND the position errors are within the prescribed accuracies. If this state is false when no exposure is on-going, it means that the new exposure should not be started. If this value becomes false during an exposure, the quality of that exposure cannot be guaranteed.
"""
      archive = true
      attributes = [
        {
            name = state
            description  = "Indicates whether all the stages keep moving AND the position errors are within the prescribed accuracies."
            type = boolean
        }
      ]
    }
    {
      name = PRISM_stageConf
      description = """
Current configuration for the rotary stage.

This telemetry can be used to check if the current configuration is as intended. If not, the user shoud edit the configuration via Configuration Service, and re-initialize this assembly so that the latest configuration will be reloaded. This telemetry is updated only when initialization is performed.

__TODO__: Add configuration of the model to compensate backlash and mechanical imperfections, and the parameters of the model. It is likely to be a simple inear equation. This equation should also include the conversion from the raw steps to the physical quantity.
"""
      archive = true
      attributes = [
        {
          name = prism
          description = "Which prism pair"
          type = integer
          minimum = 1
          maximum = 2
        }
        {
          name = accuracy
          description = "Position accuracy required for the tracking motion."
          type = float
          units = degree
        }
        {
          name = offset
          description = "Offset angle from the home switch to the 0 degree angle."
          type = float
          units = degree
          exclusiveMinimum = -180
          maximum = 180
        }
        {
          name = acceleration
          description = """
Acceleration of trapezoidal profile for normal rotation. This value won't be applied to tracking motion.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to accelerate to the top speed.
"""
          type = float
          units = degree/s/s
        }
        {
          name = deceleration
          description = """
Deceleration of trapezoidal profile for normal rotation. This value won't be applied to tracking motion.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.
"""
          type = float
          units = degree/s/s
        }
        {
          name = velocity
          description = """
Maximum velocity of trapezoidal profile for normal rotation. This value won't be applied to tracking motion.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.

__TBD__: Don't we need to define base velocity (start/stop velocity)? Couldn't find equivalent parameter in [Manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf).
"""
          type = float
          units = degree/s
        }
        {
          name = smoothing
          description = """
Smoothing factor of trapezoidal profile for normal rotation. This value won't be applied to tracking motion. See 'Motion Smoothing' chapter in [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf) for more details. The argument of KS command corresponds to this factor. 0.25 means no smoothing, and 64 means the maximum smoothing.

__TODO__: Check if the type should be integer or float. According to [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf), this value is 'an integer from 0.25 to 64 and represents the amount of smoothing', but 0.25 is not an integer.

__TBD__: Maybe it would be useful to map this value to the range between 0 to 1 for simplicity.
"""
          type = float
          minimum = 0.25
          maximum = 64
        }
        {
          name = accelerationHoming
          description = """
Acceleration of trapezoidal profile for homing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to accelerate to the top speed.
"""
          type = float
          units = degree/s/s
        }
        {
          name = decelerationHoming
          description = """
Deceleration of trapezoidal profile for homoing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.
"""
          type = float
          units = degree/s/s
        }
        {
          name = velocityHoming
          description = """
Maximum velocity of trapezoipdal profile for homing.

__TODO__: Define maximum and minimum value. Minimum value should be larger than meaningful value. Do not allow extremly low value which may lead to very very long time to decelerate to zero.

__TBD__: Don't we need to define base velocity (start/stop velocity)? Couldn't find equivalent parameter in [Manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf).
"""
          type = float
          units = degree/s
        }
        {
          name = smoothingHoming
          description = """
Smoothing factor of trapezoidal profile for homing. See 'Motion Smoothing' chapter in [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf) for more details. The argument of KS command corresponds to this factor. 0.25 means no smoothing, and 64 means the maximum smoothing.

__TODO__: Check if the type should be integer or float. According to [the manual of DMC-40x0](http://www.galilmotioncontrol.com/download/manual/man_40x0.pdf), this value is 'an integer from 0.25 to 64 and represents the amount of smoothing', but 0.25 is not an integer...

__TBD__: Maybe it would be useful to map this value to the range between 0 to 1 for simplicity.
"""
          type = float
          minimum = 0.25
          maximum = 64
        }
        {
          name = temperatureThreshold
          description = "Temperature threashold for overheating protection."
          type = float
          units = K
        }
        {
          name = softwareLimits
          description = "Software limits of the rorary stage. In the tracking mode, the positional demands that exceed this range will be rounded to equivalent angles within the software limit range. Otherwise, the positional demands will be ignored."
          type = array
          dimensions: [2]
          items = {
            type = float
          }
          units = degree
        }
        {
            name = currentSeparation
            description  = """
Current separation (differential angle of two rotary stages) in FCRS<sub>IRIS-ROT</sub>.
"""
            type = float
            units = degree
        }
        {
          name = motorCurrent
          description = """
The motor current for this stage.

__TDB__: Define the range, or the possible values.
"""
          type = float
          units = A
        }
      ]
    }
  ]
}
