subsystem = IRIS
component = imager.adc

receive = [
    {
        name = RETRACT-init
        description = """
This command initializes the RETRACT functional group and reloads the configuration files.  It does not initialize the underlying HCDs, clear the datum, or trigger any motion, but it stops the ongoing motion and deenergizes the motor.

If the stage position is halfway, the datum may be lost as a result of re-initialization.

Preemptable: no
"""
        completionType = longRunning
    }
    {
        name = RETRACT-datum
        description = """
Start datuming the retract stage.

Preemptable: yes
"""
        completionType = longRunning
        preconditions  = [
                          "RETRACT-state.enabled == true &&",
                          "RETRACT-state.temperature != HIGH &&",
                          "RETRACT-state.temperature != UNKNOWN"
                         ]
        postconditions = [
                          "RETRACT-state.motion == IN_POSITION &&",
                          "RETRACT-state.selection == RETRACTED &&",
                          "RETRACT-stage.power == false"
                         ]
    }
    {
        name = RETRACT-select
        description = """
This command inserts the Science ADC in the science light path or retracts it.

Preemptable: yes
"""
        requiredArgs = [target]
        args = [
            {
                name = target
                description = "Target position."
                enum = [DEPLOY, RETRACT]
            }
        ]
        completionType = longRunning
        preconditions  = [
                          "(RETRACT-state.motion == DATUMED.IN_POSITION || RETRACT-state.motion == DATUMED.HALFWAY) &&",
                          "RETRACT-state.enabled == true &&",
                          "RETRACT-state.temperature != HIGH &&",
                          "RETRACT-state.temperature != UNKNOWN"
                          ]
        postconditions = [
                          "RETRACT-state.motion == IN_POSITION &&",
                          "(RETRACT-state.selection == DEPLOYED || RETRACT-state.selection == RETRACTED) &&",
                          "RETRACT-stage.power == false"
                         ]
    }
    {
        name = RETRACT-move
        description = """
This command moves the retract stage to an arbitrary position relative to the current position.

Preemptable: yes
"""
        requiredArgs = [target]
        args = [
            {
                name = target
                description = "Target position relative to the current position."
                type = double
                units = step
            }
            {
                name = velocity
                description = "Motion velocity."
                type = double
                units = step/s
                exclusiveMinimum = 0
                default = RETRACT-RawMotionVelocity
            }
            {
                name = acceleration
                description = "Motion acceleration."
                type = double
                units = step/s<sup>2</sup>
                exclusiveMinimum = 0
                default = RETRACT-RawMotionAcceleration
            }
            {
                name = minimumJerkTime
                description = "Minimum jerk time."
                type = double
                units = s
                default = RETRACT-RawMinJerkTime
            }
            {
                name = maximumJerkTime
                description = "Maximum jerk time."
                type = double
                units = s
                default = RETRACT-RawMaxJerkTime
            }
        ]
        completionType = longRunning
        role = "eng"
        preconditions  = [
                           "(RETRACT-state.motion == DATUMED:IN_POSITION || RETRACT-state.motion == DATUMED.HALFWAY || RETRACT-state.motion == MOVING:RAW) &&",
                           "RETRACT-state.enabled == true &&",
                           "RETRACT-state.temperature != HIGH &&",
                           "RETRACT-state.temperature != UNKNOWN"
                         ]
        postconditions = [
                          "(RETRACT-state.motion == IN_POSITION || RETRACT-state.motion == HALFWAY) &&",
                          "RETRACT-stage.power == false"
                          ]
    }
    {
        name = RETRACT-disable
        description = """
This command disables this functional group. Any commands that trigger a motion or turn on the motor current will be rejected when disabled.

This command is expected to be called before starting a cool-down or warm-up procedure.
"""
        completionType = immediate
        preconditions  = [
                          "RETRACT-state.move == false &&",
                          "RETRACT-state.power == false &&",
                          "RETRACT-state.enabled == true"
                         ]
        postconditions = ["RETRACT-state.enabled == false"]
    }
    {
        name = RETRACT-enable
        description = """
This command enables this functional group.

This command is expected to be called after the cool-down or warm-up procedure is completed.
"""
        completionType = immediate
        preconditions  = ["RETRACT-state.enabled == false"]
        postconditions = ["RETRACT-state.enabled == true"]
    }
    {
        name = RETRACT-park
        description = "This command does nothing."
        completionType = immediate
    }
    {
        name = RETRACT-stop
        description = """
Stop the motion of the retract stage and turn off the motor power.

Preemptable: no
"""
        completionType = longRunning
        preconditions  = ["RETRACT-state.motion == DATUMING || RETRACT-state.motion == MOVING.* || RETRACT-state.motion == ERROR"]
        postconditions = [
                           "RETRACT-state.motion == UNDATUMED || RETRACT-state.motion == DATUMED.IN_POSITION || RETRACT-state.motion == DATUMED.HALFWAY || RETRACT-state.motion == ERROR",
                           "RETRACT-stage.power == false"
                          ]
    }
    {
        name = RETRACT-test
        description = "This command executes a self-test. The actual action to be taken is TBD. This command never drives the retract stage."
        completionType = immediate
        role = "eng"
    }
    {
        name = RETRACT-debug
        description = "This command sets the current debug level."
        completionType = immediate
        role = "eng"
    }
    {
        name = RETRACT-setTemperatureThreshold
        description = "Change the overheat protection temperature threshold."
        completionType = immediate
        requiredArgs = [threshold]
        args = [
            {
                name = threshold
                description = "New threshold."
                type = float
                units = K
                minimum = 0
            }
        ]
        role = "eng"
    }

    {
        name = PRISM-init
        description = """
This command initializes the PRISM functional group and reloads the configuration files.  It does not initialize the underlying HCDs, clear the datum, or trigger any motion, but it stops the ongoing motion and/or deenergizes the motor. The existing datum will not be cleared if it is in a normal state.

Preemptable: no
"""
        completionType = longRunning
    }

    {
        name = PRISM-datum
        description = """
Start datuming of two or one rotary stage.

Preemptable: yes
"""
        args = [
          {
            name        = skip
            description = "If you do not want to datum a specific rotary stage, specify true to the corresponding boolean element. The first element coresponds to the P1 rotary stagen and the second one corresponds to the P2 rotary stage."
            type        = array
            dimensions  = [2]
            items = {
              type = boolean
            }
          }
        ]
        preconditions  = ["PRISM-state.enabled == false &&",
                          "PRISM-state.temperature != HIGH &&",
                          "PRISM-state.temperature != UNKNOWN"]
        completionType = longRunning
    }
    {
        name = PRISM-disable
        description = """
This command deenergizes the stepper motors of the P1 and P2 rotary stages and disables this functional group. Any commands that may trigger a motion or energize the motors will be rejected when disabled.

This command is expected to be called before starting the cool-down or warm-up procedure.

Preemptable: no
"""
        completionType = longRunning
        postconditions = ["PRISM-state.enabled == false"]
    }
    {
        name = PRISM-enable
        description = """
This command enables this functional group.

This command is expected to be called after starting the cool-down or warm-up procedure.
"""
        completionType = immediate
        preconditions  = ["PRISM-state.enabled == false"]
        postconditions = ["PRISM-state.enabled == true"]
    }
    {
        name = PRISM-park
        description = "This command does nothing."
        completionType = immediate
    }
    {
        name = PRISM-follow
        description = """
Start the tracking motion. TODO: fill out more details.

Preemptable: yes
"""
        completionType = longRunning
        preconditions  = ["PRISM-state.enabled == false &&",
                          "PRISM-state.temperature != HIGH &&",
                          "PRISM-state.temperature != UNKNOWN"]
    }
    {
        name = PRISM-move
        description = """
This command moves the rotary stages.

Preemptable: yes
"""
        requiredArgs = [target]
        args = [
            {
                name = skip
                description = "which rotary stage not to move"
                type        = array
                dimensions  = [2]
                items = {
                    type = boolean
                }
            }
            {
                name = target
                description = "Target angle in OABCS."
                type        = array
                dimensions  = [2]
                items = {
                    type = double
                }
                units = degree
                minimum = 0
                exclusiveMaximum = 360
            }
            {
                name = velocity
                description = "Motion velocity. Zero is not allowed. The sign determined the motion direction. A positive velocity moves the stage in the counterclockwise direciton looking from above."
                type        = array
                dimensions  = [2]
                items = {
                    type = double
                }
                units = deg/s
                exclusiveMinimum = -Inf
                exclusiveMaximum = Inf
                default = DefaultMotionVelocity
            }
            {
                name = acceleration
                description = "Motion acceleration."
                type        = array
                dimensions  = [2]
                items = {
                    type = double
                }
                units = deg/s<sup>2</sup>
                exclusiveMinimum = 0
                exclusiveMaximum = Inf
                default = DefaultMotionAcceleration
            }
            {
                name = minimumJerkTime
                description = "Minimum jerk time."
                type        = array
                dimensions  = [2]
                items = {
                    type = double
                }
                units = s
                exclusiveMinimum = 0
                exclusiveMaximum = Inf
                default = DefaultMotionMinJerkTime
            }
            {
                name = maximumJerkTime
                description = "Maximum jerk time."
                type        = array
                dimensions  = [2]
                items = {
                    type = double
                }
                units = s
                exclusiveMinimum = 0
                exclusiveMaximum = Inf
                default = DefaultMotionMaxJerkTime
            }
        ]
        completionType = longRunning
        preconditions  = ["PRISM-state.enabled == true &&",
                          "PRISM-state.temperature != HIGH &&",
                          "PRISM-state.temperature != UNKNOWN"]
        postconditions = ["PRISM-state.move == DATUMED || PRISM-state.move == MOVING"]
    }
    {
        name = PRISM-stop
        description = """
Stop the motion of all rotary stages.

Preemptable: no
"""
        completionType = longRunning
        postconditions = ["PRISM-state.move == DATUMED || PRISM-state.move == UNDATUMED"]
    }
    {
        name = PRISM-test
        description = "This command executes a self-test. Actual action to be taken is TBD. This command never rotates the rotary stage."
        completionType = immediate
        role = "eng"
    }
    {
        name = PRISM-debug
        description = "This will set the current debug level."
        completionType = immediate
        role = "eng"
    }
    {
        name = PRISM-setTemperatureThreshold
        description = "Change the overheat protection temperature thresholds."
        completionType = immediate
        requiredArgs = [threshold]
        args = [
            {
                name = skip
                description = "which rotary stage not to change the temperature threshold"
                type        = array
                dimensions  = [2]
                items = {
                    type = boolean
                }
            }
            {
                name = threshold
                description = "New threshold for each rotary stage."
                type = array
                dimensions  = [2]
                items = {
                    type = float
                }
                units = K
                minimum = 0
            }
        ]
        role = "eng"
    }
    {
        name = shutdown
        description = "Stop this Assembly. It does not send this command down to the underlying HCDs. The on-going motion may continue after shutdown."
        completionType = longRunning
    }
]
