subsystem = IRIS
component = imager.filter

receive = [
    {
        name = init
        description = """
This command initializes this assembly reloads the configuration files. It does not trigger any motion or initiate any action on the hardware.
"""
        completionType = longRunning
    }
    {
        name = datum
        description = "Start datuming of all filter wheels."
        args = [
          {
            name        = skip
            description = "If you do not want to datum a specific filter wheel, specify true to the corresponding boolean element. The first element coresponds to the filter wheel #1 and the last one corresponds to the filter wheel #5."
            type        = array
            dimensions  = [5]
            items = {
              type = boolean
            }
          }
        ]
        preconditions  = ["state.enabled == false"]
        completionType = longRunning
    }
    {
        name = disable
        description = """
This command disables this assembly. Any commands that trigger a motion or turn on the motor current will be rejected when disabled.

This command is expected to be called before starting the cool-down or warm-up procedure.
"""
        completionType = immediate
        preconditions  = [
                          "state.move == false",
                          "state.power == false",
                          "state.enabled == true"
                         ]
        postconditions = ["state.enabled == false"]
    }
    {
        name = enable
        description = """
This command enables this functional group.

This command is expected to be called after the cool-down or warm-up procedure is completed.
"""
        completionType = immediate
        preconditions  = ["state.enabled == false"]
        postconditions = ["state.enabled == true"]
    }

    {
        name = park
        description = "This command inserts a dark filter in the light path."
        completionType = longRunning
        preconditions  = [
                          "state.enabled == true",
                          "state.error == false",
                          "state.selection1 != UNKNOWN",
                          "state.selection2 != UNKNOWN",
                          "state.selection3 != UNKNOWN",
                          "state.selection4 != UNKNOWN",
                          "state.selection5 != UNKNOWN"
                          ]
        postconditions = [
                          "state.onTarget == true",
                          "state.move == false",
                          "state.power == false"
                         ]
    }
    {
        name = select
        description = """
This command changes filters.

This command does not sequence the motion of five wheels. The motion of the five wheels will be triggered at once and they will move in parallel. The direction of rotation is determined by this assembly in a way that the motion time will be minimum.
"""
        args = [
            {
                name = wheel1
                description = "Desired filter in wheel 1."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
            {
                name = wheel2
                description = "Desired filter in wheel 2."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
            {
                name = wheel3
                description = "Desired filter in wheel 3."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]    
            }
            {
                name = wheel4
                description = "Desired filter in wheel 4."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
            {
                name = wheel5
                description = "Desired filter in wheel 5."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
        ]
        completionType = longRunning
        preconditions  = [
                          "state.enabled == true",
                          "state.error == false",
                          "state.selection1 != UNKNOWN",
                          "state.selection2 != UNKNOWN",
                          "state.selection3 != UNKNOWN",
                          "state.selection4 != UNKNOWN",
                          "state.selection5 != UNKNOWN"
                         ]
        postconditions = [
                          "state.onTarget == true",
                          "state.move == false",
                          "state.power == false"
                         ]
    }
    {
        name = move
        description = "This command moves a filter wheel to an arbitrary position."
        requiredArgs = [wheel, target]
        args = [
            {
                name = wheel
                description = "which wheel to move"
                type = integer
                minimum = 1
                maximum = 5
            }
            {
                name = target
                description = "Target position."
                type = double
                units = step
            }
            {
                name = relative
                description = "if true, the target position is considered as the position relative to the current position"
                type = boolean
                default = false
            }
            {
                name = velocity
                description = "Motion velocity."
                type = double
                units = step/s
                exclusiveMinimum = 0
                default = RawMotionVelocity
            }
            {
                name = acceleration
                description = "Motion acceleration."
                type = double
                units = step/s<sup>2</sup>
                exclusiveMinimum = 0
                default = RawMotionAcceleration
            }
            {
                name = minimumJerkTime
                description = "Minimum jerk time."
                type = double
                units = s
                default = RawMotionMinJerkTime
            }
            {
                name = maximumJerkTime
                description = "Maximum jerk time."
                type = double
                units = s
                default = RawMotionMaxJerkTime
            }
        ]
        completionType = longRunning
        role = "eng"
        preconditions  = [
                          "state.enabled == true",
                          "state.selection{#w} != UNKNOWN ('#w' is the wheel number)"
                         ]
        postconditions = [
                          "state.move == false",
                          "state.power == false"
                         ]
    }
    {
        name = stop
        description = "Stop the motion of all filter wheels and turn off the power of all stepper motors."
        completionType = longRunning
        postconditions = [
                          "state.move == false",
                          "state.power == false"
                         ]
    }
    {
        name = test
        description = "This command executes a self-test. Actual action to be taken is TBD. This command never rotates the filter wheels or turn on the motor power."
        completionType = immediate
        role = "eng"
    }
    {
        name = debug
        description = "This will set the current debug level."
        completionType = immediate
        role = "eng"
    }
    {
        name = shutdown
        description = "Stop this assembly running. It does not send this command down to the underlying HCD(s). The on-going motion may continue after shutdown."
        completionType = longRunning
    }
]
