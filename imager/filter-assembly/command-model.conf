subsystem = IRIS
component = imager.filter

description = """
Commands which can be accepted by IRIS Filter Assembly.

This command model is designed based on [Software Design Patterns for Device and Component Controllers (TMT.INS.TEC.16.079.DRF01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-57492/cc_design_patterns_DRF01_b.docx). As proposed by the design pattern, standard assembly commands and assembly-specific commands are provided for each functional group. All commands are classified into either 'request' or 'submit' based on the command type defintion described in the design pattern document.
"""

receive = [
    {
        name = INIT
        description = """
This command causes the assembly to initialize its variables, read configuration, and verify dependencies.  It prepares the assembly internally such that it is available to communicate with outside processes and begin managing the stages.  It does not cause any motion or initiate any action on the hardware but, it validates the connections and hardware presence before completing. It may also initialize per-axis configuration of the underlying Galil HCD.

This command can be invoked only when none of the wheels is in motion. All commands will be rejected during the initialization.

Initialization can fail for various reasons including HCD communications failure, hardware failure, or invalid configurations. In this case, the command state will report an error.

Command type: request
"""
    }
    {
        name = TEST
        description = """
This command executes a self-test.  Actual action to be taken is TBD.

This command never rotates filter wheels.

This command can be invoked only when none of the filter wheels is in motion. All commands will be rejected during the test.

Command type: request
"""
    }
    {
        name = DATUM
        description = """
Perform homing of all the filter wheels and reset the stepper motor counter to accurately and precisely insert the filters later. The datum will be done in a way that, at least, one dark filter is in place after the initial insertion of a dark filter. Actual sequence would be as shown below:

* If no dark filter is in place, rotate one filter wheel to the dark filter position.
* Perform homing of other 4 filter wheels.
* Rotate one filter wheel out of the indexed wheels to a dark filter position.
* Index the remaining filter wheel.

As a consequence, one dark filter is in place after datum. Note that the above procedure assumes that the home position is different from a dark filter slot. The actual sequence might be changed depending on the home position.

This command can be invoked only when none of the filter wheels is in motion. All commands except “stop” will be rejected during the datum.

In the event of an error or failure to index, datum will return an error response, the command state will be set to error, and the movement state will be unindexed and the position will be reported as unknown.

Command type: submit
"""
    }
    {
        name = LOCK
        description = """
This command locks this assembly. The commands that trigger any motion will be rejected when locked.

This command is expected to be called before starting the cool-down or warm-up procedure.

Command type: request
"""
    }
    {
        name = UNLOCK
        description = """
This command unlocks this assembly.

This command is expected to be called after the cool-down or warm-up procedure is completed.

Command type: request
"""
    }
    {
        name = PARK
        description = """
This command inserts all dark filters into the light path.

This command may also rotate one filter wheel to insert the most commonly used filter, and rotate other filters to the through slot so that the configuration time can be minimized on average in the next observation. The actual action depends on the filter deployment, which is currently not determined yet.

This command can be invoked only when none of the filter wheels is in motion. All commands except “stop” will be rejected during the parking.

Command type: submit
"""
    }
    {
        name = SELECT
        description = """
This command changes filters.

The argument of this command allows any combination of filters, but this assembly may validate the combination and rejects the command if the given combination is not valid (e.g. two or more narrow-band filters are selected, all through holes). This command does not sequence the motion of 5 wheels. Motion will be triggered at once, and be performed in parallel. IS is in charge of sequencing the commands to Filter Assembly to make sure that a dark filter is in place before the telescope is moving to a new target. This assembly does not guarantee that a dark filter is in place when exchanging the filter. For that, IS must first rotate only one filter wheel to the dark filter position. And then, IS must rotate the other filter wheels to the requested position and finally remove the dark filter. This is because Filter Assembly does not know when to remove the dark filter.

The direction of rotation is determined by Filter Assembly in a way that the motion time will be the shortest.

This command can be invoked only when none of the filter wheels is in motion.

Command type: submit
"""
        args = [
            {
                name = wheel1
                description = "Desired filter in wheel 1."
                enum = [PV_LENS, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
            {
                name = wheel2
                description = "Desired filter in wheel 2."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]
            }
            {
                name = wheel3
                description = "Desired filter in wheel 3."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, TBD14, THROUGH]    
            }
            {
                name = wheel4
                description = "Desired filter in wheel 4."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, DARK, THROUGH]
            }
            {
                name = wheel5
                description = "Desired filter in wheel 5."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, TBD12, TBD13, DARK, THROUGH]
            }
        ]
    }
    {
        name = STOP
        description = """
Stop the rotation of all wheels.

Command type: submit
"""
    }
    {
        name = DEBUG
        description = """
This will set the current debug level. This is for debugging purposes and allows the user to change the level of logging for debugging purposes.

Command type: request
"""
    }
    {
        name = SHUTDOWN
        description = """
Stop this assembly running. This will cause all of the software to exit. It does not send this command down to the underlying HCDs. If currently shutting down, all other commands will be rejected.

Command type: request
"""
    }
]
