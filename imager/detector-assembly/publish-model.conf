subsystem = IRIS
component = imager.detector

publish {
  events = [
    {
      name = state
      description = "State of this assembly."
      archive = true
      attributes = [
        {
          name = cmd
          description  = "command state"
          enum = [UNINITIALIZED, READY, BUSY, COTINUOUS]
        }
        {
          name = debug
          description  = "debug level"
          enum = [DEBUG, INFO, WARN, ERROR]
        }
        {
          name = enabled
          description = "indicates whether this assembly is enabled"
          type = boolean
        }
        {
          name = interlock
          description = "Indicates whether the exposure is prohibited due to the interlock signal from Safety HCD."
          type = boolean
        }
        {
          name = connection
          description = "Indicates the connection with the underlying HCD(s)."
          type = struct
          attributes = [
            {
              name        = "detectors"
              description = "Connection with the HCDs that control indivisual detectors."
              type        = array
              dimensions  = [4]
              items       = {
                type = boolean
              }
            }
          ]
        }
      ]
    }
    {
      name = cmdStatus
      description = "Standard command status of this functional group"
      archive = true
      attributes = [
        {
            name = (standardized)
            description  = "See [Software Component Controller Design Patterns (TMT.INS.TEC.16.079)](https://docushare.tmt.org/docushare/dsweb/ServicesLib/Document-57492/History) for more details"
            type = string
        }
      ]
    }
    {
      name = exposureConf
      description = """
The currently loaded configuration currently used in the on-going exposure or that will be used in the next exposure. It can be used to confirm the loaded configuration before starting an exposure.
"""
      archive = true
      attributes = [
        {
          name = loaded
          description = "False until the first configuration is loaded"
          type = boolean
        }
        {
          name = obsId
          description = "Observation ID given by load_configuration command."
          type = string
        }
        {
          name = totalTime
          description = "Total exposure time, which is _rampIntegrationTime_ multiplied by _ramps_."
          type = float
          units = s
          minimum = 0
        }
        {
          name = rampIntegrationTime
          description  = "Actual integration time of one ramp. The requested integration time is rounded down to the nearest valid integration time which is a multiple of _readoutTime_."
          type = float
          minimum = 0 
          units = s
        }
        {
          name = readoutTime
          description  = """Time to clock one detector. It depends on pixel clocking time, subarray dimensions, and the number of channels and whether the ODGW is in use."""
          type = float
          units = s
        }
        {
          name = reads
          description = "The number of reads in one ramp. This value is calculated from the requested integration time for one ramp."
          type = integer
          minimum = 1
          maximum = 100000
        }
        {
          name = ramps
          description = "The number of ramps in one exposure, which is given by load_configuration command."
          type = integer
          minimum = 1
          maximum = 100000
          default = 1
        }
      ]
    }
    {
      name = staticConf
      description = """
The current detector static configuration, including gain, pixel clocking time, and nominal read noise of the entire array measured at the commissioning time.

This configuration is expected to be changed only on a rare occasion.
"""
      archive = true
      attributes = [
        {
          name = detector1
          description = "current per-detector configuration of Detector #1"
          type = struct
          attributes = [
            {
              name = name
              description = "Identifier (e.g. serial number of each detector (if available)."
              type = string
            }
            {
              name = use
              description = "Indicates whether this detector is in use or not."
              type = boolean
            }
            {
              name = gain
              description = "Conversion of photoelectrons to counts for each detector."
              type = float
              units = e-/ADU
            }
            {
              name = readNoise
              description = """
Nominal read noise of the entire array measured at the commissioning phase.

Note that the read noise may be different among pixels, channels, or areas. The actual read noise of science observation should be measured from the taken images.
"""
              type = float
              units = e-
            }
            {
              name = pixelClockingTime
              description  = "Time to select and read one pixel."
              type = float
              units = ms
            }
            {
              name = resetLevel
              description = "Reset level of each detector."
              type = float
              units = TBD
            }
            {
              name = channels
              description  = "The number of channels. The possible numbers are 1, 4, 16, 32, 64."
              type = integer
              minimum = 1
              maximum = 64
              default = 64
              units = channels
            }
            {
              name = versionDSP
              description = "The version number of downloaded DSP/FPGA code in the detector controller."
              type = string
            }
            {
              name = versionDriver
              description = "The version number of Linux driver for Leach controller."
              type = string
            }
            {
              name = versionAPI
              description = "The version number of ARC API."
              type = string
            }
          ]
        }
        {
          name = detector2
          description = "current per-detector configuration of Detector #2"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector3
          description = "current per-detector configuration of Detector #3"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector4
          description = "current per-detector configuration of Detector #4"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
      ]
    }
    {
      name = perDetectorState
      description = "Per detector state."
      archive = true
      attributes = [
        {
          name = detector1
          description = "current state of Detector #1"
          type = struct
          attributes = [
            {
              name = power
              description = "This telemetry indicates whether the detector power (not the detector controller power) is on or off."
              type = boolean
            }
            {
              name = (placeholder)
              description = "TBD"
              type = string
            }
          ]
        }
        {
          name = detector2
          description = "current state of Detector #2"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector3
          description = "current state of Detector #3"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector4
          description = "current state of Detector #4"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
      ]
    }
    {
      name = exposureState
      description = "This state telemetry includes the information about whether an exposure is in progress, the number of readouts done in the current ramp, the number of ramps completed in the current exposure."
      archive = true
      attributes = [
        {
          name = isAborted
          description = "indicate whether exposure in progress or last completed exposure has been aborted"
          type = boolean
          default = FALSE
        }
        {
          name = abortInProgress
          description = "indicate whether exposure in progress is currently being aborted"
          type = boolean
          default = FALSE
        }
        {
          name = exposureInProgress
          description = "Flag for whether exposure is in progress. This flag becomes true when an exposure of any of four detectors is in progress."
          type = boolean
          default = FALSE
        }
        {
          name = readsDone
          description = "The number of reads completed for ramp in progress or last completed."
          type = array
          dimensions = [4]
          items = {
            type = integer
            minimum = 0
            maximum = 100000
          }
          default = [0, 0, 0, 0]
        }
        {
          name = rampsDone
          description = "The number of ramps completed for exposure in progress or last completed."
          type = array
          dimensions = [4]
          items = {
            type = integer
            minimum = 0
            maximum = 100000
          }
          default = [0, 0, 0, 0]
        }
        {
          name = exposureDone
          description = "The number of exposures completed with the current configuration. It is incremented every time startExposure is called and reset when loadConfiguration is called."
          type = integer
          minimum = 0
          maximum = 99999
        }
      ] 
    }
  ]
  
  observeEvents = [
    {
      name = exposureStart
      description = "This Observe Event indicates the science exposure is about to start."
      archive = true
      attributes = [
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
    {
      name = exposureEnd
      description = """This Observe Event indicates the end of the science exposure. Once this event is received, DMS can stop collecting metadata and OCS can start another exposure.

Note that the underlying HCDs (or their child processes) may be still writing the raw science frames to DRS when this event is issued.
"""
      archive = true
      attributes = [
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
    {
      name = exposureAborted
      description = "This Observe Event indicates that the science exposure has been aborted due to an observer request or some technical issue."
      archive = true
      attributes = [
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = reason
          description = "The reason why this exposure was aborted."
          type = string
        }
      ]
    }
    {
      name = irDetectorExposureState
      description = """
      This is a standardized IR detector state Observe Event.
      The irDetectorExposureState is provided as a state variable to indicate the current state of the detector system.
      The irDetectorExposureState groups parameters that change relatively slowly, and this event will be published whenever any of its parameters changes.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated. This is always IRIS-IMG."
          type = string
        }
        {
          name = exposureInProgress
          description = """
            A boolean indictating if detector system is acquiring an exposure.
            It is delimited by exposureStart and exposureEnd Observe Events.
            exposureInProgress should be false if abortInProgress is true (TBD).
          """
          type = boolean
        }
        {
          name = abortInProgress
          description = """
            A boolean indictating if an abort has been requested and is underway
          """
          type = boolean
        }
        {
          name = isAborted
          description = """
            A boolean indictating if an abort has occurred and is completed.
            abortInProgress will be false when isAborted is true.
            isAborted will be set to false with the start of the next exposure
          """
          type = boolean
        }
        {
          name = operationalState
          description = """
          An enumeration that indicates if the detector system is available and operational with values: READY, BUSY, ERROR.
            *Allowable Values*
            <ul>
            <li>READY - indicates the system can execute exposures.
            <li>BUSY  - indicates system is BUSY with the most likely reason being it is acquiring data
            <li>ERROR - indicates the detector system is in an error state. This could happen as a result of a command or due to a spontaneous failure. Corrective action is required. The operationalState is reset to READY if the failure is cleared or when the next exposure is started.
            </ul>
          """
          enum = [ READY | BUSY | ERROR ]
        }
        {
          name = errorMessage
          description = """
            An optional parameter that can be included when the detector system is in the ERROR operationalState to help understand the error state.
            This value should be cleared and removed from the state when the operationalState returns to READY.
          """
          type = string
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
    {
      name = irDetectorExposureData
      description = """
        This is a standardized IR detector state Observe Event.
        The irDetectorExposureData event contains fast-changing data about the internals of the current exposure.
        This data is useful for user interfaces and Sequencers. This event will be published at the full frame readout rate during an ongoing exposure.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated. This is always IRIS-IMG."
          type = string
        }
        {
          name = readsInRamp
          description = """
            The integer total number of reads in the ramp. Value should be constant during an exposure..
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = readsComplete
          description = """
            Integer number of currently completed reads from 1 to readsInRamp.
            Will be reset to 0 at the start of every ramp.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = rampsInExposure
          description = """
            The integer total number of ramps in the current exposure. Value should be constant during an exposure.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = rampsComplete
          description = """
            Integer number of completed ramps from 1 to rampsInExposure.
            Will be reset to 0 at the start of every exposure.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = exposureTime
          description = "Length (as a float) in seconds of the current exposure.  For example: 1.25"
          type = float
          units = s
          minimum = 0
        }
        {
          name = remainingExposureTime
          description = """
            Number (as a float) of seconds remaining in the current exposure.  For example: 1.25.
            Should count down in integer seconds -- no faster than 1 Hz.
          """
          type = float
          units = s
          minimum = 0
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = exposure
          description = "Exposure number."
          type = integer
          minimum = 1
          maximum = 99999
        }
      ]
    }
  ]
}
