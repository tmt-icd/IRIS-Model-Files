subsystem = IRIS
component = imager.detector

publish {
  currentStates = [
    {
      name = DETECTOR_state
      description = "State of this functional group."
      archive = true
      attributes = [
        {
          name = cmd
          description  = "command state"
          enum = [UNINITIALIZED, READY, BUSY, COTINUOUS]
        }
        {
          name = debug
          description  = "debug level"
          enum = [DEBUG, INFO, WARN, ERROR]
        }
        {
          name = sleep
          description = "sleep state"
          type = boolean
        }
        {
          name = interlock
          description = "Indicates whether the exposure is prohibited due to the interlock signal from Safety HCD."
          type = boolean
        }
        {
          name = connection
          description = "Indicates the connection with the underlying HCD(s)."
          type = struct
          attributes = [
            {
              name        = "detectors"
              description = "Connection with the HCDs that control indivisual detectors."
              type        = array
              dimensions  = [4]
              items       = {
                type = boolean
              }
            }
          ]
        }
      ]
    }
    {
      name = DETECTOR_cmdStatus
      description = "Standard command status of this functional group"
      archive = true
      attributes = [
        {
            name = (standardized)
            description  = "See [Software Component Controller Design Patterns (TMT.INS.TEC.16.079)](https://docushare.tmt.org/docushare/dsweb/ServicesLib/Document-57492/History) for more details"
            type = string
        }
      ]
    }
    {
      name = DETECTOR_exposureConf
      description = """
The currently loaded configuration currently used in the on-going exposure or that will be used in the next exposure. It can be used to confirm the loaded configuration before starting an exposure.
"""
      archive = true
      attributes = [
        {
          name = loaded
          description = "False until the first configuration is loaded"
          type = boolean
        }
        {
          name = obsId
          description = "Observation ID given by DETECTOR_load_configuration command."
          type = string
        }
        {
          name = totalTime
          description = "Total exposure time, which is _rampIntegrationTime_ multiplied by _ramps_."
          type = float
          units = s
          minimum = 0
        }
        {
          name = rampIntegrationTime
          description  = "Actual integration time of one ramp. The requested integration time is rounded down to the nearest valid integration time which is a multiple of _readoutTime_."
          type = float
          minimum = 0 
          units = s
        }
        {
          name = readoutTime
          description  = """Time to clock one detector. It depends on pixel clocking time, subarray dimensions, and the number of channels and whether the ODGW is in use."""
          type = float
          units = s
        }
        {
          name = reads
          description = "The number of reads in one ramp. This value is calculated from the requested integration time for one ramp."
          type = integer
          minimum = 1
          maximum = 100000
        }
        {
          name = ramps
          description = "The number of ramps in one exposure, which is given by DETECTOR_load_configuration command."
          type = integer
          minimum = 1
          maximum = 100000
          default = 1
        }
      ]
    }
    {
      name = DETECTOR_staticConf
      description = """
The current detector static configuration, including gain, pixel clocking time, and nominal read noise of the entire array measured at the commissioning time.

This configuration is expected to be changed only on a rare occasion.
"""
      archive = true
      attributes = [
        {
          name = detector1
          description = "current per-detector configuration of Detector #1"
          type = struct
          attributes = [
            {
              name = name
              description = "Identifier (e.g. serial number of each detector (if available)."
              type = string
            }
            {
              name = use
              description = "Indicates whether this detector is in use or not."
              type = boolean
            }
            {
              name = gain
              description = "Conversion of photoelectrons to counts for each detector."
              type = float
              units = e-/ADU
            }
            {
              name = readNoise
              description = """
Nominal read noise of the entire array measured at the commissioning phase.

Note that the read noise may be different among pixels, channels, or areas. The actual read noise of science observation should be measured from the taken images.
"""
              type = float
              units = e-
            }
            {
              name = pixelClockingTime
              description  = "Time to select and read one pixel."
              type = float
              units = ms
            }
            {
              name = resetLevel
              description = "Reset level of each detector."
              type = float
              units = TBD
            }
            {
              name = channels
              description  = "The number of channels. The possible numbers are 1, 4, 16, 32, 64."
              type = integer
              minimum = 1
              maximum = 64
              default = 64
              units = channels
            }
            {
              name = versionDSP
              description = "The version number of downloaded DSP/FPGA code in the detector controller."
              type = string
            }
            {
              name = versionDriver
              description = "The version number of Linux driver for Leach controller."
              type = string
            }
            {
              name = versionAPI
              description = "The version number of ARC API."
              type = string
            }
          ]
        }
        {
          name = detector2
          description = "current per-detector configuration of Detector #2"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector3
          description = "current per-detector configuration of Detector #3"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector4
          description = "current per-detector configuration of Detector #4"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
      ]
    }
    {
      name = DETECTOR_perDetectorState
      description = "Per detector state."
      archive = true
      attributes = [
        {
          name = detector1
          description = "current state of Detector #1"
          type = struct
          attributes = [
            {
              name = power
              description = "This telemetry indicates whether the detector power (not the detector controller power) is on or off."
              type = boolean
            }
            {
              name = (placeholder)
              description = "TBD"
              type = string
            }
          ]
        }
        {
          name = detector2
          description = "current state of Detector #2"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector3
          description = "current state of Detector #3"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
        {
          name = detector4
          description = "current state of Detector #4"
          type = struct
          attributes = [
            {
              name = (struct)
              description = "(see detector1 for more details)"
              type = string
            }
          ]
        }
      ]
    }
    {
      name = DETECTOR_exposureState
      description = "This state telemetry includes the information about whether an exposure is in progress, the number of readouts done in the current ramp, the number of ramps completed in the current exposure."
      archive = true
      attributes = [
        {
          name = isAborted
          description = "indicate whether exposure in progress or last completed exposure has been aborted"
          type = boolean
          default = FALSE
        }
        {
          name = abortInProgress
          description = "indicate whether exposure in progress is currently being aborted"
          type = boolean
          default = FALSE
        }
        {
          name = exposureInProgress
          description = "Flag for whether exposure is in progress. This flag becomes true when an exposure of any of four detectors is in progress."
          type = boolean
          default = FALSE
        }
        {
          name = readsDone
          description = "The number of reads completed for ramp in progress or last completed."
          type = array
          dimensions = [4]
          items = {
            type = integer
            minimum = 0
            maximum = 100000
          }
          default = [0, 0, 0, 0]
        }
        {
          name = rampsDone
          description = "The number of ramps completed for exposure in progress or last completed."
          type = array
          dimensions = [4]
          items = {
            type = integer
            minimum = 0
            maximum = 100000
          }
          default = [0, 0, 0, 0]
        }
        {
          name = exposureDone
          description = "The number of exposures completed with the current configuration. It is incremented every time DETECTOR_startExposure is called and reset when DETECTOR_loadConfiguration is called."
          type = integer
          minimum = 0
          maximum = 99999
        }
      ] 
    }
  ]
  
  events = [
   {
     name = startExposure
     description = "This event notifies that a new exposure started."
     archive = true
     attributes = [
       {
         name = obsId
         description = "Observation ID to which the current exposure belongs."
         type = string
       }
       {
         name = exposure
         description = "This number is incremented every time DETECTOR_startExposure is called and reset when DETECTOR_loadConfiguration is called. The number of the first exposure is 0."
         type = integer
         minimum = 0
         maximum = 99999
       }
     ]
   }
   {
     name = readoutCompleted
     description = """
This event notifies that one readout has been read from the detector controller and saved in the Readout Disk. This event is issued every readout from each detector. Therefore, the subscriber will typically receive this event four times for each readout cycle.
"""
     archive = true
     attributes = [
       {
         name = detector
         description = "Detector # from which the readout is generated."
         type = integer
         minimum = 1
         maximum = 4
       }
       {
         name = read
         description = "Read # of the readout."
         type = integer
         minimum = 0
         maximum = 99999
       }
       {
         name = ramp
         description = "Ramp # to which the readout belongs."
         type = integer
         minimum = 0
         maximum = 99999
       }
       {
         name = integrationTime
         description = "The integration time of this readout (the time between the last reset and this readout)."
         type = float
         units = s
         minimum = 0
       }
       {
         name = exposure
         description = "Exposure #."
         type = integer
         minimum = 0
         maximum = 99999
       }
       {
         name = obsId
         description = "Observation ID to which the exposure belongs."
         type = string
       }
     ]
   }
   {
     name = endExposure
     description = """
This event notifies that the last readout in the exposure and the intermediate raw science frame have been saved in the Readout Disk. The DRS may still be processing and generating a science raw frame after this event is published.
"""
     archive = true
     attributes = [
       {
         name = exposure
         description = "Exposure #."
         type = integer
         minimum = 0
         maximum = 99999
       }
       {
         name = obsId
         description = "Observation ID to which the current exposure belongs."
         type = string
         minimum = 0
         }
       ]
     }
     {
       name = aborting
       description = """
This event notifies that this assembly started to try aborting the current exposure. When aborted, a corresponding "aborted" event will be published. If the on-going exposure is successfully completed before aborting, an "endExposure" event will be published instead.

The abort may be triggered by IS, or by the event of errors (all the detector controllers are not working correctly, connection with Readout Processor failed, etc.)
"""
      archive = true
      attributes = [
        {
          name = exposure
          description = "Exposure #."
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID to which the current exposure belongs."
          type = string
        }
        {
          name = reason
          description = "The reason why this exposure was aborted."
          type = string
        }
      ]
    }
    {
      name = aborted
      description = "This event notifies that the current exposure has been aborted."
      archive = true
      attributes = [
        {
          name = exposure
          description = "Exposure #."
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID to which the current exposure belongs to."
          type = string
        }
        {
          name = reason
          description = "The reason why this exposure was aborted."
          type = string
        }
      ]
    }
    {
      name = readoutFailed
      description = """
This event notifies that one readout couldn't be read from a detector controller. This event may happen if the detector controller or Detector HCD encounters an error while retrieving one readout from the detector, or when Detector HCD fails to save the readout to the Readout Disk.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector # from which the readout is generated."
          type = integer
          minimum = 1
          maximum = 4
        }
        {
          name = read
          description = "Read # of the readout."
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = ramp
          description = "Ramp # to which the readout belongs."
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = integrationTime
          description = "The integration time of this readout (time between the end of the last reset and the beginning of this readout). It is equal to _readoutTime_ multiplied by (_ramp_ - 1)."
          type = float
          units = s
          minimum = 0
        }
        {
          name = exposure
          description = "Exposure #."
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID to which the exposure belongs."
          type = string
        }
        {
          name = reason
          description = "The reason why this readout couldn't be read or saved."
          type = string
        }
      ]
    }
  ]
}
